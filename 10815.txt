#include <iostream>
#include <algorithm>
#include <vector>
#include <set>

using namespace std;

set<int> have;
vector<int> check;

int n, m;
long long mid, high, low, result;

int main()
{
    cin >> n;
    for (int i{1}; i <= n; i++) {
        int t{};
        cin >> t;
        have.insert(t);
    }
    cin >> m;
    for (int i{1}; i <= m; i++) {
        int t{};
        cin >> t;
        check.push_back(t);
    }
    
    for(int i{}; i < check.size(); i++) {
        auto it = have.find(check.at(i));
        if (it != have.end()) {
            cout << 1 << " ";
        } else cout << 0 << " ";
    }
        
    return 0;
}

// 첫번 쨰로 입력 받은 것 정렬해서 이분 탐색으로 두번쨰 입력 중 첫번 쨰 입력에서 입력 받았는 지 확인해서 출력.
// 그냥 std::find()로 되나 해봤는데 시간초과 -> O(N)이라고 함.
// set::find()는 O(logN)이라길래 set에 첫번째 입력 저장한 후 find() 해봤더니 정답처리 됨.


// # 이분 탐색 이용
#include <iostream>
#include <algorithm>
#include <vector>
#include <set>

using namespace std;

vector<int> have;
vector<int> check;

int n, m;
long long mid, high, low, result;

int main()
{
    cin >> n;
    for (int i{1}; i <= n; i++) {
        int t{};
        cin >> t;
        have.push_back(t);
    }
    cin >> m;
    for (int i{1}; i <= m; i++) {
        int t{};
        cin >> t;
        check.push_back(t);
    }
    
    sort(have.begin(), have.end());
    
    
    for (int i{}; i < check.size(); i++) {
        low = 0;
        high = n;
        bool flag = 0;
        while(low <= high) {
            int t = check[i];
            mid = (low + high) / 2;
            if (have[mid] == t) {
                flag = 1;
                break;
            }
            if (have[mid] < t) {
                low = mid + 1;
            }
            if (have[mid] > t) {
                high = mid - 1;
            }
        }
        if (flag) {
            cout << 1 << " ";
        } else cout << 0 << " ";
    }
    
        
    return 0;
}