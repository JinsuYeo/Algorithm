#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

typedef struct {
    int x;
    int y;
} COORD;

COORD dir[4] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};

int N, M, C{1 << 30};
int arr[101][101];
bool visited[101][101];
//priority_queue<pair<int, COORD>> q;
priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> q;

void bfs(){
    q.push(make_pair(0, make_pair(1, 1)));
    visited[1][1] = true;
    while (!q.empty()) {
        int x = q.top().second.first;
        int y = q.top().second.second;
        int count = q.top().first;
        q.pop();
  
        if (y == N && x == M) {
            C = count;
            return;
        }
        
        for (int i{}; i < 4; i++) {
            int nextx = x + dir[i].x;
            int nexty = y + dir[i].y;
            
            if (nextx < 1 || nextx > M || nexty < 1 || nexty > N) continue;
            if (!visited[nexty][nextx] && arr[nexty][nextx] == 0) {
                q.push(make_pair(count, make_pair(nextx, nexty)));
                visited[nexty][nextx] = true;
                continue;
            }
            if (!visited[nexty][nextx] && arr[nexty][nextx] == 1) {
                q.push(make_pair(count+1, make_pair(nextx, nexty)));
                visited[nexty][nextx] = true;
            }
        }
    }
}

int main(void) {
    cin >> M >> N;

    for (int i{1}; i <= N; i++) {
        for (int j{1}; j <= M; j++) {
            scanf("%1d", &arr[i][j]);
        }
    }
    
    bfs();
    
    cout << C << '\n';
    
    return 0;
}

// N*M크기의 미로. 빈방(0), 벽(1).
// 상하좌우로 이동 가능, 벽을 부수면 count세고 이동 가능. 최소한으로 벽을 부숴서 (1,1)에서 (N, M)으로 가는 경우를 찾아 벽을 부순 개수 출력.

// bfs로 탐색, 좌표와 지나간 1의 개수 pair로 저장.
// visited 처리를 하되 상하좌우 중 0이 있는 곳 먼저 가고, 1인 경우 나중에 방문. (N, M)에 도착 시 저장된 count중 가장 작은 값 찾아 출력.

// -> flag 이용해 구현 했으나 틀림.
// -> 반례 찾다가 반례는 결국 못찾고 우선순위 큐 사용하라는 답변 보고 flag로 0과 1에 우선순위 둔 부분을 우선순위 큐로 구현하면 되겠다 싶어 고쳐봄. -> 처음에 struct와 int의 pair로 큐를 구현했어서 우선순위 큐 만들 때 우선순위가 결정이 안되어서 컴파일 에러남. 연산자 오버로딩(<, ==) 했는데 제대로 작동 안됨. 아마 생각못한 부분이 있을 듯.
// 결국 다른 사람 코드 보고 풀었는데, pair의 pair로 구현하고, vector를 기본으로 사용하는 우선순위 큐로 만든 뒤 정렬을 greater<>로 해서 구현함. 잘 익혀둘 것.
// -> priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> q;
// 참조) https://jaimemin.tistory.com/1049
// 이 부분과 관련된 부분들 고쳐주니 정답 처리됨.

// 정답 맞추고 보니 아마 0이 있을 때 1은 큐에 넣지 않는 방식으로 구현해서 0이 있어도 1로 갔을 때 최종적으로 지나간 1이 더 적은 경우가 반례였을 듯.
// + 알고리즘 자체는 나름 생각 잘했으나, 이번에도 적절한 자료구조를 생각하지 못함. 우선순위 큐 이미 알고 있던 자료구조인데도 생각 못함.
// 1보다 0에 먼저 가야하고 1의 순서가 나중이라는 것 생각했고, 우선순위 큐 이미 알고 있던 자료구조인데도 생각 못했고 + flag로 억지로 구현하려고 하니 반례가 생길 수 밖에 없었음.
// + 우선순위 큐로 순서 정해서 bfs 돌려주니 가장 먼저 도착한 경우가 count를 가장 적게 센 경우이므로 count를 여러번 비교해서 최솟값 찾을 필요도 없어짐.
// + 보통 flag 사용했던 경우는 자료구조를 잘못 생각한 경우이거나 더 나은 구현방법이 있었음. flag 사용해야 할 경우 다시 한번 전체적으로 생각해보기.
// + greater<>은 원래 내림차 순 정렬되나, priority_queue는 원래부터 내림차 순 정렬이기 때문에 반대로 오름차 순 정렬되게 됨.

// + 다익스트라 사용해서 한번 더 풀어보기.

// 다익스트라 이용
#include<iostream>
#include<string>
#include<queue>
 
#define endl "\n"
#define MAX 100
using namespace std;
 
int N, M, Answer;
int MAP[MAX][MAX];
int Dist[MAX][MAX];
bool Visit[MAX][MAX];
 
int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };
 
void Input()
{
    Answer = 987654321;
    cin >> N >> M;
    for (int i = 0; i < M; i++)
    {
        string Inp;
        cin >> Inp;
        for (int j = 0; j < Inp.length(); j++)
        {
            MAP[i][j] = Inp[j] - '0';
            Dist[i][j] = 987654321;
        }
    }
}
 
void Print()
{
    cout << "#############################" << endl;
    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cout << Dist[i][j] << " ";
        }
        cout << endl;
    }
    cout << "#############################" << endl;
 
}
 
void BFS(int a, int b)
{
    queue<pair<int, int>> Q;
    Q.push(make_pair(a, b));
    Dist[a][b] = 0;
 
    while (Q.empty() == 0)
    {
        //Print();
        int x = Q.front().first;
        int y = Q.front().second;
        Q.pop();
            
        for (int i = 0; i < 4; i++)
        {
            int nx = x + dx[i];
            int ny = y + dy[i];
                
            if (nx < 0 || ny < 0 || nx >= M || ny >= N) continue;
            
            if (MAP[nx][ny] == 1)
            {
                if (Dist[nx][ny] > Dist[x][y] + 1)
                {
                    Dist[nx][ny] = Dist[x][y] + 1;
                    Q.push(make_pair(nx, ny));
                }
            }
            else if (MAP[nx][ny] == 0)
            {
                if (Dist[nx][ny] > Dist[x][y])
                {
                    Dist[nx][ny] = Dist[x][y];
                    Q.push(make_pair(nx, ny));
                }
            }
        }
    }
}
 
void Solution()
{
    BFS(0, 0);
    cout << Dist[M-1][N-1] << endl;
}
 
void Solve()
{
    Input();
    Solution();
}
 
int main(void)
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
 
    //freopen("Input.txt", "r", stdin);
    Solve();
 
    return 0;
}

// 다익스트라 알고리즘
// 다이나믹 프로그래밍을 활용한 대표적인 최단경로 탐색 알고리즘.
// 특정한 한 정점에서 다른 모든 정점으로 가는 최단 경로 알려줌. 이 때, 음의 간선이 있어서는 안됨. -> 현실 세계에서는 음의 간선 존재하지 않기 때문에 다익스트라는 현실 세계에 사용하기 매우 적합한 알고리즘이라 할 수 있음.

// 다익스트라 알고리즘이 다이나믹 프로그래밍 문제인 이유는 '최단 거리는 여러개의 최단 거리로 이루어져 있기 때문'. 즉, 작은 문제가 큰 문재의 부분 집합에 속함.
// 참조) https://m.blog.naver.com/ndb796/221234424646

// 코드는 백준 1261번 문제를 다익스트라 알고리즘으로 구현한 풀이 방법.
// 참조) https://yabmoons.tistory.com/76
// 이렇게 풀 수 있다는 것만 일단 알아두기.

