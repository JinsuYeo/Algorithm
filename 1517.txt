#include <iostream>
#include <array>
#include <vector>

using namespace std;

long long n, c;

array<long long, 500001> arr;
array<long long, 500001> sorted;

void merge(int start, int mid, int end) {
    int i = start;
    int j = mid + 1;
    int k = start;
    while (i <= mid && j <= end) {
        if (arr[i] <= arr[j]) {
            sorted[k++] = arr[i++];
        } else {
            c += mid-i+1;
            sorted[k++] = arr[j++];
        }
    }
    while (i <= mid) {
        sorted[k++] = arr[i++];
    }
    while (j <= end) {
        sorted[k++] = arr[j++];
    }
    
    for (int i{start}; i <= end; i++) {
        arr[i] = sorted[i];
    }
}

void merge_sort(int start, int end) {
    if (start < end) {
        int mid = (start + end) / 2;
        merge_sort(start, mid);
        merge_sort(mid+1, end);
        merge(start, mid, end);
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> n;
    for (int i{1}; i <= n; i++) {
        cin >> arr[i];
    }
    
    merge_sort(1, n);
    
    cout << c;
    
    return 0;
}

// 쉬울 줄 알았는데 정답률 너무 낮아서 입력값 범위 보니 n <= 500000이라 O(n^2)인 버블 정렬 못함.
// +버블 소트 시 swap이 일어나는 횟수 세야해서 sort() 이용 불가.
// -> 트리 이용하거나 병합 정렬 사용해야 함.

// 병합 정렬 구현한 뒤, mid+1 ~ end 구간이 start ~ mid 구간보다 먼저 삽입될 때, count++ 하면 될거라고 생각하고 시작.

// 병합 정렬이 정확히 기억이 안나서 다시 공부함.
// + 생각해보니 count++하면 3, 4 와 1, 2 있을 때,  count는 2가 되지만 사실 4번 일어남.

// 결국 다른 사람 코드 보고 풀었는데, count++ 가 아니라 count += mid-i+1; 로 구현해야 했음(2, 4  1, 3 에서 1이 먼저 삽입될 때, count += 1-0+1(2), 3이 4보다 먼저 삽입될 때,  i = 1이므로 1-1+1로 count += 1이됨. 2 4 1 3 -> 2 1 4 3 -> 1 2 4 3 -> 1 2 3 4로 3번 맞음)

// 병합 정렬 구현한 것에서 저 부분만 바꿨는데 안되길래 한참 고민했는데, arr를 sorted로 바꿔주는 작업을 안해서 그런 것이었음. 병합 정렬 구현이 아직 많이 서투른 듯. 병합 정렬 좀 더 익숙해지기.


// # 세그먼트 트리 이용
#include <iostream>
#include <array>
#include <vector>
#include <algorithm>

using namespace std;

int n;

vector<pair<int, int>> arr;
vector<int> seg_tree;

void update(int node, int start, int end, int index){
    if (start == end) {
        seg_tree[node] = 1;
        return;
        }
    int mid = (start+end)/2;
    if(index <= mid) update(node*2, start, mid, index);
    else update(node*2 + 1, mid + 1, end, index);
    seg_tree[node] = seg_tree[node*2] + seg_tree[node*2+1];
}

int cnt(int node, int start, int end, int left, int right){
    if(left > end || right < start) return 0;
    if(left <= start && right >= end) return seg_tree[node];
    int mid = (start+end)/2;
    int left_count = cnt(node*2, start, mid, left, right);
    int right_count = cnt(node*2 + 1, mid+1, end, left, right);
    return left_count + right_count;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    long long c{};
    
    cin >> n;

    seg_tree.resize(n*4);
    arr.push_back({-1000000001, 0});
    for (int i{1}; i <= n; i++) {
        int t;
        cin >> t;
        arr.push_back({t, i});
    }
    
    sort(arr.begin(), arr.end());
    for (int i{1}; i <= n; i++) {
        c += (long long)cnt(1, 1, n, arr[i].second + 1, n);
        update(1, 1, n, arr[i].second);
    }
    cout << c;
    
    return 0;
}

// 들어오는 순서를 i(1~n)으로 하고, 입력 값을 t로해서 배열에 pair 사용해 입력함(원래 인덱스 따로 저장).
// 그 후 정렬하고, 세그먼트 트리 이용해 버블 정렬 횟수 세줌. 결국 버블 정렬의 횟수는 자기 자신의 위치에서 오른쪽에 자기보다 작은 값이 몇개인지 세어주면 되기 때문에 arr[1]부터 시작해서 arr[1].second(원래 인덱스)~n 까지 구간합을 세줌. 그 후 1~원래 index(arr[n].second) 까지의 노드들(가장 하위 노드들을 순서대로)을 1로 초기화 해주고 상위노드는 하위 노드 2개 합으로 초기화.
// 이 과정을 arr[n] 까지 반복.
// 예를 들어 3, 2, 1 입력되면 1, 2, 3으로 정렬.
// 1의 원래 인덱스는 3. 첫 순서이므로 count는 세지지 않음(아직 모든 노드가 0), 1~3까지에 해당하는 노드 1로 초기화(실제로는 4,5,6번 노드, 트리 업데이트 하는 알고리즘으로 구현)하고 상위 노드들도 각각 왼쪽, 오른쪽 자식의 합으로 초기화해줌. 2는 원래 2번 인덱스이므로 3(2+1)~3까지의 구간합을 count에 더해줌 -> 1(1이 3으로 갈때 2도 자리 한번 바뀔 수 밖에 없음). 마지막으로 3은 원래 인덱스 1이므로 2~3까지의 구간합 세주면 2임. 따라서 count는 3.

// 이해하기 위해서 세그먼트 트리 다시 공부했고, 공부해도 이해하기 어려워서 한참동안 디버깅하면서 구조 파악하려고 노력함. 이제 이해는 했는데 다른 문제에서 구현하라고 하면 못할 듯. 감은 어느정도 잡은 것 같음. 다음번에 세그먼트 트리 관련 문제 나오면 다시 공부해 보자.

// 참고) 세그먼트 트리의 사이즈는 보통 2*n(배열의 크기) ~ 4*n 사이라고 함. 4*n+1이면 안전.
// 함수에 사용되는 start, end, left, right는 배열의 위치 의미, node는 실제 트리의 노드(자식 노드로 넘어갈 때마다 node*2(왼쪽) or node*2+1(오른쪽) 해줌).

// 참고)
// 세그먼트 트리
// https://www.youtube.com/watch?v=ahFB9eCnI6c

// https://velog.io/@kimdukbae/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%8A%B8-%ED%8A%B8%EB%A6%AC-Segment-Tree

// 문제 풀이
// https://restudycafe.tistory.com/379