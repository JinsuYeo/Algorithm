#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n, result;

vector<int> p;
vector<int> z;
vector<int> m;

int main(void){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> n;
    for (int i{}; i < n; i++) {
        int t{};
        cin >> t;
        if (t < 0) {
            m.push_back(t);
        } else if(t == 0) z.push_back(t);
        else if(t == 1) result += 1;
        else p.push_back(t);
    }
    
    sort(m.begin(), m.end());
    sort(p.begin(), p.end(), greater<int>());
    
    if (m.size() % 2 == 0) {
        for (int i{}; i < m.size(); i += 2) {
            result += m.at(i) * m.at(i+1);
        }
    } else if(m.size()%2 != 0) {
        if (!z.empty()) {
            m.pop_back();
        } else {
            result += m.back();
            m.pop_back();
        }
        for (int i{}; i < m.size(); i+=2) {
            result += m.at(i) * m.at(i+1);
        }
    }
    
    if (p.size()%2 != 0) {
        result += p.back();
        p.pop_back();
    }
    for (int i{}; i < p.size(); i+=2) {
        result += p.at(i) * p.at(i+1);
    }
    
    cout << result << '\n';
    
    return 0;
}

// 0보다 작은수와 큰수를 나누어서 벡터에 삽입한 뒤(음수, 양수 나누어줌), 음수는 오름차 순으로 정렬, 양수는 내림차 순으로 정렬해주고, 1이 들어오면 그대로 result에 더해줌(1은 곱하면 없어지기 때문에 곱하지 않고 더해주어야 합이 더 커짐). 그 후, 0이 입력되었는지 확인 후, 입력되었고 음수의 개수가 홀수라면 음수 중 가장 큰 값(벡터의 마지막에 있는 요소)를 없애줌(n*0 = 0, 음수는 없애주어야 합이 가장 크게 됨). 음수가 짝수라면 벡터의 처음부터 2개씩 곱한 뒤 result에 더해줌. 양수의 경우 홀수일 땐 양수 벡터의 가장 마지막 수(양수 중 가장 작은 수)는 result에 더해주고 양수가 짝수일 때 벡터의 처음부터 2개 씩 곱해준 뒤 result에 더해줌(내림차 순 정렬되어 있음).

// 정답률이 낮은 그리디 문제 중 처음으로 혼자 맞춘 문제인 듯. 하다보니 좀 감이 잡힘. 거의 있을 수 있는 경우의 수들을 모두 체크해서 각각의 경우에 따라 처리해주는 느낌.