#include <iostream>
#include <cstdio>
#include <string>

using namespace std;

long dp[5001], arr[5001];

int main(int argc, const char * argv[]) {
    string n{};
    cin >> n;
    
    if(n[0] == '0') {
        cout << 0 << endl;
        return 0;
    }
    
    for(int i{}; i < n.size(); i++) {
        arr[i+1] = long(n[i] - '0');
    }
    
    dp[0] = 1;
    dp[1] = 1;
    
    for(int i{2}; i <= n.size(); i++) {
        if(arr[i] != 0) dp[i] = dp[i-1];
        long tn = arr[i-1] * 10 + arr[i];
        if(tn >= 10 && tn <= 26) {
            dp[i] = (dp[i] + dp[i-2]) % 1000000;
        } else if(arr[i] == 0 && tn > 26){
            cout << 0 << endl;
            return 0;
        }
    }
        
    cout << dp[n.size()] << endl;
    
    return 0;
}

// 알고리즘은 생각했으나 정리 잘하지 못하기도 했고 코드로 구현을 잘 못했음. + string으로 바로 숫자를 문자열로 입력받을 수 있다는 것을 몰랐음.
// 왼쪽 숫자가 3 이상이면 dp[i] = dp[i-1], 수가 10이나 20이면 dp[i] = dp[i-2], 둘 다 아니면 dp[i] = dp[i-1] + dp[i-2] 라고 생각 했으나, 왼쪽 수가 3 이상이 아니라 왼쪽 수 * 10 + 현재 수가 26 이하인 조건을 확인해야 했고 생각한 알고리즘을 정리해서 코드로 구현하지 못했음.
// 다른사람의 코드를 보고 나서야 3가지 조건을 2개로 줄여서 구현할 수 있다는 것을 알았음
// (0이 아닐 때, 10~26일 때). + 왼쪽 수 * 10 + 현재 수도 생각은 했지만 응용 못했음.
// 많이 연습하는게 중요할 듯. 그래도 비슷하게 알고리즘은 생각해냈으니 구현하는 연습 + 컴퓨팅적 사고? 연습이 필요할 듯.
// 2시간,  O(n)