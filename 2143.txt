#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

long long T;
int N, M;
long long result;

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> T;
    cin >> N;
    vector<int> A(N);
    for (int i{}; i < N; i++) {
        cin >> A[i];
    }
    
    cin >> M;
    vector<int> B(M);
    for (int i{}; i < M; i++) {
        cin >> B[i];
    }
    
    vector<long long> v1, v2;
    
    int low{}, high{};
    long long sum{};
    while (low < A.size()) {
        sum += A[high++];
        v1.push_back(sum);
        if (high == A.size()) {
            low ++;
            high = low;
            sum = 0;
        }
    }
    
    low = 0;
    high = 0;
    sum = 0;
    while (low < B.size()) {
        sum += B[high++];
        v2.push_back(sum);
        if (high == B.size()) {
            low ++;
            high = low;
            sum = 0;
        }
    }
    
    sort(v1.begin(), v1.end());
    sort(v2.begin(), v2.end());
    
    for (int i{}; i < v1.size(); i++) {
        long long num = T - v1[i];
        long long low = lower_bound(v2.begin(), v2.end(), num) - v2.begin();
        long long high = upper_bound(v2.begin(), v2.end(), num) - v2.begin();
        
        if (num == v2[low]) result += high - low;
    }
    
    cout << result << "\n";
    
    return 0;
}

// 완전 탐색 연습 백준 2143번 두 배열의 합
// 백준 2632번과 마찬가지로 구간 합 v1, v2에 각각 저장한 뒤, T - v1[i]가 v2에 몇개 있는지 lower_bound와 upper_bound 이용해 찾아서 출력.
// 바로 직전에 2632번 풀었어서 이번 문제는 직접 구현할 수 있었음.
// 구현한 후 제출했는데 틀려서 다시 생각 -> 공집합인 경우 제외 + 음수, 양수인 경우 다르게 해야하는 줄 알았는데 생각해보니 둘 다 동일 + result의 타입 long long으로 해야 함. -> 고치니 정답 처리됨.