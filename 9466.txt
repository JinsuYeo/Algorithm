#include <iostream>
#include <algorithm>
#include <vector>
#include <array>

using namespace std;

int c, n, counter, start;
array<int, 100001> visited;
array<int, 100001> g;
array<int, 100001> done;

void clear(){
    for(int i{1}; i <= n; i++) {
        visited[i] = 0;
        done[i] = 0;
        g[i] = 0;
        counter = 0;
    }
}

void dfs(int x){
    visited[x] = 1;
    
    int y = g[x];
    
    if(!visited[y]) dfs(y);
    else if (!done[y]) {
        for(int i{y}; i != x; i = g[i])
            counter++;
        counter++;
    }
    
    done[x] = 1;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> c;
    for(int i{1}; i <= c; i++) {
        cin >> n;
        counter = 0;
        for(int j{1}; j <= n; j++) {
            cin >> g[j];
        }
        
        for(int j{1}; j <= n; j++) {
            if(!visited[j])
                dfs(j);
        }
        cout << n - counter << "\n";
        clear();
    }
    
   
    return 0;
}

// 처음에는 다른 그래프 문제들처럼 vector에 양방향으로 연결하는 방식으로 그래프 구현하고 방문되지 않은 각 정점에서부터 dfs했을 때 순환인 정점의 개수 찾아 n-count로 출력하려고 했는데,  시간 초과라 생각해보니 directed graph라 굳이 dfs에서 for문으로 edge 처리할 필요 없다는 것 깨닫고 다시 입력과 dfs 구현 했으나 그래도 시간 초과. 그 다음 벡터에 순환에 포함된 정점 넣은 뒤 한번에 처리해주었지만 이중 반복문 안에 vector.clear() 들어있어서인지 시간초과. 결국 다른 사람 코드 보고 풀었는데, 알고리즘은 잘 생각해낸 것 같은데 이번에도 구현 능력이 부족해서 틀린 것이었음. 아마 다른 사람의 코드 참고 안했다면 이 코드 절대 생각 못했을 것 같음.  특히 29번 라인의 반복문.

// 알고리즘을 생각해내는 능력은 어느 정도 늘은 것 같지만 정말 어려운 문제는 생각해낸 알고리즘을 최소한의 시간복잡도를 가질 수 있는 코드로 구현해 낼 수 있어야 풀 수 있으나 그 능력이 부족. 더 많이 다른 사람들의 코드를 보고, 구현해보면서 이런 방법들에 익숙해질 필요 있을 듯. + 생각해낸 알고리즘을 더 간결하게 정리 or 구체화 하는 능력 기르기.

// memset() 사용 방법과 기능 공부하기, vector와 primitive array 사용할 때의 시간 복잡도나 효율의 차이, 언제 어떤 것 사용해야 하는지, vector 등 STL 컨테이너나 알고리즘 등의 시간 복잡도 알아보기