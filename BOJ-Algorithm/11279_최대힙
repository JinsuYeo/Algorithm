#include <algorithm>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

struct Maxheap {
    vector<int> heap;
    
    void init() {
        heap.resize(1);
    }
    
    void heapify(const int a[], int size) {
        init();
        heap.insert(heap.end(), a, a+size);
    
        for (int i = size/2; i >= 1; i--) {
            shiftDown(i);
        }
    }
    
    void push(int x) {
        int idx = int(heap.size());
        heap.push_back(x);
        shiftUp(idx);
    }
    
    void shiftUp(int idx) {
        for (int i = idx; (i > 1) && (heap[i/2] < heap[i]); i/=2) {
            int t = heap[i/2];
            heap[i/2] = heap[i];
            heap[i] = t;
        }
    }
    
    void shiftDown(int idx) {
        for(int i = idx, j = idx * 2; j < heap.size(); i=j, j*=2) {
            if (j+1 < heap.size() && heap[j] < heap[j+1]) {
                j++;
            }
            
            if (heap[i] < heap[j]) {
                int t = heap[i];
                heap[i] = heap[j];
                heap[j] = t;
            }
        }
    }
    
    int top() {
        if(heap.size() <= 1) {
            return 0;
        }
        return heap[1];
    }
    
    bool pop() {
        int n = int(heap.size());
        if(n <= 1) {
            return false;
        }
        
        int t = heap[1];
        heap[1] = heap[n-1];
        heap[n-1] = t;
        heap.pop_back();
        
        shiftDown(1);
        return true;
    }
};

Maxheap pq;

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    int n;
    cin >> n;
    pq.init();
    
    for (int i = 0; i < n; i++) {
        int t;
        cin >> t;
        if (t == 0) {
            cout << pq.top() << '\n';
            pq.pop();
        } else {
            pq.push(t);
        }
    }
    
    
    return 0;
}

// Max Heap 구현.

#include <algorithm>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

priority_queue<int> pq;

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    int n;
    cin >> n;
    
    for (int i = 0; i < n; i++) {
        int t;
        cin >> t;
        if (t == 0) {
            if (pq.empty()) {
                cout << 0 << '\n';
            } else {
                cout << pq.top() << '\n';
                pq.pop();
            }
        } else {
            pq.push(t);
        }
    }
    
    
    return 0;
}

// STL priority_queue 이용해 구현.

