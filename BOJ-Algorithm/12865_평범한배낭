#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <vector>

using namespace std;

int main() {
    
    iostream::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n, k;
    
    cin >> n >> k;
    
    vector<vector<int>> dp(n+1, vector<int>(k+1));
    vector<int> w(n);
    vector<int> v(n);
    
    for (int i = 0; i < n; i++) {
        cin >> w[i];
        cin >> v[i];
    }
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= k; j++) {
            if(j >= w[i]) {
                dp[i+1][j] = max(dp[i][j], dp[i][j-w[i]] + v[i]);
            } else {
                dp[i+1][j] = dp[i][j];
            }
        }
    }
    
    cout << dp[n][k] << '\n';
    
    return 0;
}

// Knapsack Problem - 시간, 공간복잡도 = O(nK)

#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <vector>

using namespace std;

int main() {
    
    iostream::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n, k;
    
    cin >> n >> k;
    
    vector<int> dp(k+1);
    vector<int> w(n);
    vector<int> v(n);
    
    for (int i = 0; i < n; i++) {
        cin >> w[i];
        cin >> v[i];
    }
    
    dp[0] = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j >= w[i]; j--) {
            dp[j] = max(dp[j], dp[j - w[i]] + v[i]);
        }
    }
    
    cout << dp[k] << '\n';
    
    return 0;
}

// Knapsack Problem - 공간복잡도 = O(K)로 줄임.
