#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

typedef long long ll;

vector<ll> tree;

void update(ll pos, ll val) {
    pos++;
    
    while (pos < tree.size()) {
        tree[pos] ^= val;
        pos += pos & -pos;
    }
}

ll query(ll pos) {
    ll res = 0;
    pos++;
    
    while (pos > 0) {
        res ^= tree[pos];
        pos &= pos - 1;
    }
    
    return res;
}

int main() {
    
    iostream::sync_with_stdio(false);
    cin.tie(NULL);
    
    int n, m;
    cin >> n;
    tree.resize(n+1);
    
    for (int i = 0; i < n; i++) {
        ll t;
        cin >> t;
        update(i, t);
        update(i+1, t);
    }

    cin >> m;
    for (int i = 0; i < m; i++) {
        ll t;
        ll a, b, c;
        cin >> t;
        if (t == 1) {
            cin >> a >> b >> c;
            update(a, c);
            update(b+1, c);
        } else {
            cin >> a;
            cout << query(a) << '\n';
        }
    }
    
    return 0;
}

// 처음에 Segment tree의 lazy propagation 이용했으나 틀림. -> XOR의 성질 이용하는 문제였음.
// ex) 1010^1010 = 0000 -> 노드의 구간(R-L+1)이 짝수일 때는 노드가 XOR을 짝수 번 한 결과를 저장하기 때문에 XOR 하는 의미가 없어짐.
// + range update, point query의 문제이기 때문에 Fenwick tree가 더 적합하다고 판단되어 Fenwick Tree 이용해 구현.
// https://latter2005.tistory.com/84, https://rccode.tistory.com/entry/C-%EB%B0%B1%EC%A4%80-12844%EB%B2%88-XOR 참조.
