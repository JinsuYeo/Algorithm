#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

struct Cord {
    int x; int y;
    int pop;
};

int N, L, R;
vector<vector<int>> country;
int day = 0;

int dirX[4] = {-1, 1, 0, 0};
int dirY[4] = {0, 0, -1, 1};

vector<Cord> bfs(int x, int y, vector<vector<bool>>& visited) {
    
    queue<Cord> q;
    vector<Cord> cop;
    
    cop.push_back({x, y, country[x][y]});
    q.push({x, y, country[x][y]});
    visited[x][y] = true;
    
    while (!q.empty()) {
        int x = q.front().x;
        int y = q.front().y;
        int pop = q.front().pop;
        q.pop();
        
        for (int i = 0; i < 4; i++) {
            int nx = x + dirX[i];
            int ny = y + dirY[i];
            
            if(nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
            
            if(!visited[nx][ny]) {
                int npop = country[nx][ny];
                int dif = abs(pop - npop);
                if(L <= dif && dif <= R) {
                    visited[nx][ny] = true;
                    cop.push_back({nx, ny, npop});
                    q.push({nx, ny, npop});
                }
            }
        }
    }
    
    return cop;
}

void move(vector<Cord> cop) {
    int total = 0;
    int size = int(cop.size());
    for (int i = 0; i < size; i++) {
        total += cop[i].pop;
    }
    
    int pop = total/size;
    
    for (int i = 0; i < size; i++) {
        int x = cop[i].x;
        int y = cop[i].y;
        country[x][y] = pop;
    }
}

void solve() {
    
    bool moved = true;
    
    while (moved) {
        moved = false;
        vector<vector<bool>> visited(N, vector<bool>(N));
        
        for(int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if(!visited[i][j]) {
                    vector<Cord> cop = bfs(i, j, visited);
                    
                    if (cop.size() > 1) {
                        moved = true;
                        move(cop);
                    }
                }
            }
        }
        
        if (moved) {
            day++;
        }
        
        vector<vector<bool>>().swap(visited);
    }
}

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    cin >> N >> L >> R;
    country.resize(N, vector<int>(N));
    
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> country[i][j];
        }
    }
    
    solve();
    
    cout << day << '\n';
    
    return 0;
}

// 1. 연합을 구하는 기능
// -> 모든 위치(!visited)에서 BFS 수행하여 국경선이 열리는 국가들을 모두 탐색하며 visited 체크 + 방문한 위치와 인구 수 저장해 return.
// 2. 만약 연합의 크기가 1인 경우 인구 이동 x, 1보다 크면 인구 이동(총 인구 수/연합 크기)
// -> 날짜 세 주어야 함. but 인구 이동 시마다 세는 것이 아니라 반복별로 인구 이공 했는지를 체크해 인구 이동이 일어났을 시 day++.
// 3. 위 과정을 인구 이동이 일어나지 않을 때까지 반복.
//
// 계획과 계획 검증에 충분한 시간 투자하여 구현 시에 변수 발생하지 않았고, 구현 후 계획한 내용 모두 수행했나 확인 후 제출하여 한번에 통과.
