#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

struct Shark {
    int x; int y;
    int size;
    int time;
};

struct cmp {
    bool operator()(Shark& s1, Shark& s2) {
        if(s1.time == s2.time && s1.x == s2.x) return s1.y > s2.y;
        if(s1.time == s2.time) return s1.x > s2.x;
        return s1.time > s2.time;
    }
};

int N;
vector<vector<int>> map;

int curX;
int curY;
int curSize = 2;
bool fish = true;

int dirX[4] = {-1, 0, 0, 1};
int dirY[4] = {0, -1, 1, 0};

int res = 0;
int cnt = 0;

void bfs(vector<vector<bool>>& visited) {
    priority_queue<Shark, vector<Shark>, cmp> pq;
    pq.push({curX, curY, curSize, 0});
    visited[curX][curY] = true;
    
    while (!pq.empty()) {
        int x = pq.top().x;
        int y = pq.top().y;
        int size = pq.top().size;
        int time = pq.top().time;
        
        pq.pop();
        
        if(map[x][y] != 0 && map[x][y] < size) {
            map[x][y] = 0;
            curX = x;
            curY = y;
            res += time;
            cnt++;
            if(cnt >= size) {
                size++;
                cnt = 0;
            }
            curSize = size;
            
            return;
        }
        
        for (int i = 0; i < 4; i++) {
            int nx = x + dirX[i];
            int ny = y + dirY[i];
            
            if (nx < 0 || nx >= N || ny < 0 || ny >= N || visited[nx][ny]) continue;
            
            visited[nx][ny] = true;
            
            if(map[nx][ny] > size) {
                continue;
            } else {
                pq.push({nx, ny, size, time+1});
            }
        }
    }
    
    fish = false;
    return;
}

void solve() {
    
    while(fish) {
        vector<vector<bool>> visited(N, vector<bool>(N));
        bfs(visited);
        vector<vector<bool>>().swap(visited);
    }
}

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> N;
    
    map.resize(N, vector<int>(N));
    
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> map[i][j];
            if(map[i][j] == 9) {
                map[i][j] = 0;
                curX = i;
                curY = j;
            }
        }
    }
    
    solve();
    
    cout << res << '\n';
    
    return 0;
}

// https://jsyeo.tistory.com/10