#include <iostream>
#include <algorithm>
#include <vector>

#define UP 0
#define DOWN 2
#define RIGHT 3
#define LEFT 1

using namespace std;

struct Shark {
    int speed;
    int dir;
    int size;
};

int R, C, M;
int pos;
vector<vector<Shark>> map;

int dirX[4] = {-1, 0, 1, 0};
int dirY[4] = {0, -1, 0, 1};

int res;

void pr() {
    for (int i = 1; i <= R; i++) {
        for (int j = 1; j <= C; j++) {
            cout << map[i][j].size << " ";
        }
        cout << '\n';
    }
}

void fishing() {
    
    int y = pos;
    for (int x = 1; x <= R; x++) {
        if(map[x][y].size) {
            res += map[x][y].size;
            map[x][y] = { 0, };
            return;
        }
    }
}

void moving() {
    vector<vector<Shark>> aux(R+1, vector<Shark>(C+1));
    for(int i = 1; i <= R; i++) {
        for(int j = 1; j <= C; j++) {
            int x = i;
            int y = j;
            
            if(map[x][y].size) {
                
                int dir = map[x][y].dir;
                int speed = map[x][y].speed;
                int nx = x-1;
                int ny = y-1;
                
                while(speed) {
                    
                    x = nx;
                    y = ny;
                    nx += dirX[dir]*speed;
                    ny += dirY[dir]*speed;
                    
                    if(nx < 0 || nx >= R || ny < 0 || ny >= C) {
                        dir = (dir+2)%4;
                        
                        if(nx < 0) {
                            speed -= x;
                            nx = 0;
                        } else if(nx >= R) {
                            speed -= R-1-x;
                            nx = R-1;
                        } else if(ny < 0) {
                            speed -= y;
                            ny = 0;
                        } else if(ny >= C) {
                            speed -= C-1-y;
                            ny = C-1;
                        }
                    } else {
                        break;
                    }
                }
                
                nx++;
                ny++;
                map[i][j].dir = dir;
                
                if(aux[nx][ny].size < map[i][j].size) {
                    aux[nx][ny] = map[i][j];
                }
            }
        }
    }
    map.swap(aux);
    aux.clear();
}

void solve() {
    
    while(++pos < C+1) {
        
        fishing();
        moving();
    }
}

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0);
    
    cin >> R >> C >> M;
    
    map.resize(R+1, vector<Shark>(C+1));
    
    for(int i = 0; i < M; i++) {
        int x, y, s, d, z;
        cin >> x >> y >> s >> d >> z;
        if(d == 1) {
            d = UP;
        } else if(d == 2) {
            d = DOWN;
        } else if(d == 3) {
            d = RIGHT;
        } else if(d == 4) {
            d = LEFT;
        }
        map[x][y] = {s, d, z};
    }
    
    solve();
    
    cout << res << '\n';
    
    return 0;
}

// https://jsyeo.tistory.com/12