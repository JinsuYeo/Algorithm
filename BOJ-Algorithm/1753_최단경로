#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

vector<vector<pair<int, int>>> edge;
vector<int> dist;
priority_queue<pair<int, int>> pq;

void dijkstra(int start) {
    
    pq.emplace(0, start);
    dist[start] = 0;
    
    while(!pq.empty()) {
        int w = -pq.top().first;
        int u = pq.top().second;
        pq.pop();
        
        if(dist[u] < w) continue;
        
        for(int i = 0; i < edge[u].size(); i++) {
            int v = edge[u][i].first;
            int nw = edge[u][i].second;
            
            if(dist[v] > w + nw) {
                dist[v] = w + nw;
                pq.push(make_pair(-dist[v], v));
            }
        }
    }
}

int main() {
    
    iostream::sync_with_stdio(false);
    cin.tie(NULL);
    
    int v, e, start;
    cin >> v >> e;
    cin >> start;
    
    edge.resize(v+1);
    dist.assign(v+1, 1<<30);
    
    for (int i = 0; i < e; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        edge[u].push_back(make_pair(v, w));
    }
    
    dijkstra(start);
        
    for (int i = 1; i < dist.size(); i++) {
        if(dist[i] == 1 << 30) cout << "INF" << '\n';
        else cout << dist[i] << '\n';
    }
        
    return 0;
}


// 다익스트라 알고리즘 사용해 구현.