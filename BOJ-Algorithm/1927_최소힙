#include <algorithm>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

void swap(int& a, int& b) {
    int t = a;
    a = b;
    b = t;
}

struct MinHeap {
    vector<int> heap;
    
    MinHeap() : heap(1) {};
    
    void push(int x) {
        int idx = int(heap.size());
        heap.push_back(x);
        shiftUp(idx);
    }
    
    void shiftUp(int idx) {
        for (int i = idx; (i > 1) && (heap[i] < heap[i/2]); i /= 2) {
            swap(heap[i], heap[i/2]);
        }
    }
    
    int top() {
        if(heap.size() <= 1) {
            return 0;
        } else {
            return heap[1];
        }
    }
    
    bool pop() {
        int n = int(heap.size());
        if(n <= 1) {
            return false;
        }
        
        swap(heap[1], heap[n-1]);
        heap.pop_back();
        
        shiftDown(1);
        return true;
    }
    
    void shiftDown(int idx) {
        int n = int(heap.size());
        for (int i = idx, j = idx*2; j < n; i = j, j *= 2) {
            if(j+1 < n && heap[j] > heap[j+1]) {
                j++;
            }
            
            if(heap[j] < heap[i]) {
                swap(heap[j], heap[i]);
            } else {
                return;
            }
        }
    }
};

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    int n;
    cin >> n;
  
    MinHeap heap;
    
    for (int i = 0; i < n; i++) {
        int t = 0;
        cin >> t;
        if(t == 0) {
            cout << heap.top() << '\n';
            heap.pop();
        } else {
            heap.push(t);
        }
    }
    
    return 0;
}

// Min Heap 구현.

#include <algorithm>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    int n;
    cin >> n;

    // priority_queue<int> pq;
    priority_queue<int, vector<int>, greater<>> pq;
    
    for (int i = 0; i < n; i++) {
        int t = 0;
        cin >> t;
        if(t == 0) {
            
            if(pq.empty()) {
                cout << 0 << '\n';
            } else {
		// cout << -pq.top() << '\n';
                cout << pq.top() << '\n';
                pq.pop();
            }
        } else {
	    // pq.push(-t);
            pq.push(t);
        }
    }
    
    return 0;
}

// STL priority_queue 이용해 구현.