#include <iostream>
#include <algorithm>
#include <vector>
#include <math.h>

using namespace std;

struct Tile {
    int type;
    int x; int y;
    
    Tile(int type, int x, int y) : type(type), x(x), y(y){}
};

vector<pair<int, int>> types[4] = {
    {},
    {{0, 0}},
    {{0, 0}, {0, 1}},
    {{0, 0}, {1, 0}}
};

int N;
vector<Tile> tiles;

vector<vector<int>> blue;
vector<vector<int>> green;

int res;

void init() {
    cin >> N;
    
    for(int i = 0; i < N; i++) {
        int t, x, y;
        cin >> t >> x >> y;
        tiles.emplace_back(t, x, y);
    }
    
    blue.resize(4, vector<int>(6));
    green.resize(4, vector<int>(6));
}

void draw(int idx) {
    Tile tile = tiles[idx];
    int type = tile.type;
    int x = tile.x;
    int y = tile.y;
    
    for (int i = 0; i < types[type].size(); i++) {
        int y = 0;
        int nx = x + types[type][i].first;
        int ny = y + types[type][i].second;
        
        blue[nx][ny] = 1;
    }
    
    if(type == 2) type = 3;
    else if(type == 3) type = 2;
    
    x = y;
    if(x == 0) {
        x = 3;
    } else if(x == 1) {
        x = 2;
    } else if(x == 2) {
        x = 1;
    } else if(x == 3) {
        x = 0;
    }
    if(type == 3) x -= 1;
    for (int i = 0; i < types[type].size(); i++) {
        int y = 0;
        int nx = x + types[type][i].first;
        int ny = y + types[type][i].second;
        
        green[nx][ny] = 1;
    }
    if(idx == 4) {
        
    }
}

void move() {
    
    int minCnt = 1<<30;
    for(int i = 0; i < blue.size(); i++) {
        int cnt = 0;
        bool exist = false;
        for (int j = 0; j < 2; j++) {
            if(blue[i][j]) {
                exist = true;
            }
        }
        if(!exist) continue;
        for (int j = 1; j < blue[i].size(); j++) {
            if (j == 1 && blue[i][j]) {
                continue;
            }
            if(blue[i][j]) break;
            cnt++;
        }
        minCnt= min(minCnt, cnt);
    }
    
    if(minCnt > 0) {
        for(int i = 0; i < blue.size(); i++) {
            for (int j = 1; j >= 0; j--) {
                if(blue[i][j]) {
                    blue[i][j+minCnt] = blue[i][j];
                    blue[i][j] = 0;
                }
            }
        }
    }
    
    minCnt = 1<<30;
    for(int i = 0; i < green.size(); i++) {
        int cnt = 0;
        bool exist = false;
        for (int j = 0; j < 2; j++) {
            if(green[i][j]) {
                exist = true;
            }
        }
        if(!exist) continue;
        for (int j = 1; j < green[i].size(); j++) {
            if (j == 1 && green[i][j]) {
                continue;
            }
            if(green[i][j]) break;
            cnt++;
        }
        minCnt= min(minCnt, cnt);
    }
    
    if(minCnt > 0) {
        for(int i = 0; i < green.size(); i++) {
            for (int j = 1; j >= 0; j--) {
                if(green[i][j]) {
                    green[i][j+minCnt] = green[i][j];
                    green[i][j] = 0;
                }
            }
        }
    }
}

void check() {
    for (int i = 0; i < blue[0].size(); i++) {
        bool full = true;
        for (int j = 0; j < blue.size(); j++) {
            if(!blue[j][i]) full = false;
        }
        if(full) {
            res++;
            for (int j = 0; j < blue.size(); j++) {
                blue[j][i] = 0;
            }
        }
    }
    
    for (int i = 0; i < green[0].size(); i++) {
        bool full = true;
        for (int j = 0; j < green.size(); j++) {
            if(!green[j][i]) full = false;
        }
        if(full) {
            res++;
            for (int j = 0; j < green.size(); j++) {
                green[j][i] = 0;
            }
        }
    }
}

void update() {
    int cnt = 0;
    bool moved = false;
    
    for (int i = int(blue[0].size())-1; i >= 0; i--) {
        bool empty = true;
        for (int j = 0; j < blue.size(); j++) {
            if(blue[j][i]) empty = false;
        }
        if(empty) {

            cnt++;
        } else {
            if(cnt == 0) continue;
            moved = true;
            for (int j = 0; j < blue.size(); j++) {
                blue[j][i+cnt] = blue[j][i];
                blue[j][i] = 0;
            }
        }
    }
    
    cnt = 0;
    moved = false;
    for (int i = int(green[0].size())-1; i >= 0; i--) {
        bool empty = true;
        for (int j = 0; j < green.size(); j++) {
            if(green[j][i]) empty = false;
        }
        if(empty) {
            cnt++;
        } else {
            if(cnt == 0) continue;
            moved = true;
            for (int j = 0; j < green.size(); j++) {
                green[j][i+cnt] = green[j][i];
                green[j][i] = 0;
            }
        }
    }
}

bool update2() {
    bool updated = false;
    int maxCnt = 0;
    for(int i = 0; i < blue.size(); i++) {
        int cnt = 0;
        for (int j = 0; j < 2; j++) {
            if(blue[i][j]) {
                cnt++;
            }
        }
        maxCnt = max(cnt, maxCnt);
    }
    
    if(maxCnt > 0) {
        updated = true;
        for (int i = 0; i < maxCnt; i++) {
            for (int j = 0; j < blue.size(); j++) {
                blue[j][blue[j].size()-1-i] = 0;
            }
        }
    }
    
    maxCnt = 0;
    for(int i = 0; i < green.size(); i++) {
        int cnt = 0;
        for (int j = 0; j < 2; j++) {
            if(green[i][j]) {
                cnt++;
            }
        }
        maxCnt = max(cnt, maxCnt);
    }
    
    if(maxCnt > 0) {
        updated = true;
        for (int i = 0; i < maxCnt; i++) {
            for (int j = 0; j < green.size(); j++) {
                green[j][green[j].size()-1-i] = 0;
            }
        }
    }
    return updated;
}

void solve() {
    
    for(int i = 0; i < tiles.size(); i++) {
        draw(i);
        move();
        check();
        update();
        if(update2()) update();
    }
}

int countResult() {
    int sum = 0;
    
    for (int i = 0; i < blue.size(); i++) {
        for (int j = 0; j < blue[i].size(); j++) {
            sum += blue[i][j];
        }
    }
    
    for (int i = 0; i < green.size(); i++) {
        for (int j = 0; j < green[i].size(); j++) {
            sum += green[i][j];
        }
    }
    
    return sum;
}

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0);
    
    init();
    
    solve();
    
    cout << res << '\n';
    cout << countResult() << '\n';
    
    return 0;
}
// https://jsyeo.tistory.com/26