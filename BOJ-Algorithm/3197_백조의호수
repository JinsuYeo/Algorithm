#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int, int> Cord;

int R, C;
vector<vector<char>> map;
bool visited[1500][1500];

bool meet = false;

int dirX[4] = {-1, 0, 1, 0};
int dirY[4] = {0, -1, 0, 1};

queue<Cord> duck;
queue<Cord> waters;

void bfs(queue<Cord>& duck, queue<Cord>& duckNext) {
    
    while(!duck.empty() && !meet) {
        int x = duck.front().first;
        int y = duck.front().second;
        duck.pop();
        
        for(int i = 0; i < 4; i++) {
            
            int nx = x + dirX[i];
            int ny = y + dirY[i];
            
            if(nx < 0 || nx >= R || ny < 0 || ny >= C) continue;
                        
            if(!visited[nx][ny] && map[nx][ny] == 'L') {
                meet = true;
                visited[nx][ny] = true;
                break;
            }
            
            if (!visited[nx][ny] && map[nx][ny] == '.') {
                visited[nx][ny] = true;
                duck.push(make_pair(nx, ny));
            }
            
            if (!visited[nx][ny] && map[nx][ny] == 'X') {
                duckNext.push(make_pair(nx, ny));
                visited[nx][ny] = true;
            }
        }
    }
    
    duck.swap(duckNext);
}

void melt(queue<Cord>& waters, queue<Cord>& waterNext) {
    while (!waters.empty()) {
        int x = waters.front().first;
        int y = waters.front().second;
        waters.pop();
        
        for(int i = 0; i < 4; i++) {
            
            int nx = x + dirX[i];
            int ny = y + dirY[i];
            
            if(nx < 0 || nx >= R || ny < 0 || ny >= C) continue;
            
            if (map[nx][ny] == 'X') {
                waterNext.push(make_pair(nx, ny));
                map[nx][ny] = '.';
            }
        }
    }

    waters.swap(waterNext);
}

void solve() {
    
    int cnt = 0;
    
    queue<Cord> waterNext;
    queue<Cord> duckNext;
    
    visited[duck.front().first][duck.front().second] = true;
    
    while(!meet) {
        
        bfs(duck, duckNext);
        if(meet) break;
        
        melt(waters, waterNext);
        cnt++;
    }
    
    cout << cnt << '\n';
}

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    cin >> R >> C;
    map.resize(R, vector<char>(C));
    
    for (int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            cin >> map[i][j];
            if(map[i][j] != 'X') {
                waters.push(make_pair(i, j));
            }
            
            if (map[i][j] == 'L' && duck.empty()) {
                duck.push(make_pair(i, j));
            }
        }
    }
    
    solve();
    
    return 0;
}


// 1. 하루 지날 때마다 물이 얼음을 녹여야 함. -> BFS
// 2. 오리가 움직여서 만날 수 있는가 확인해야 함. 
// -> DFS 사용해 확인한다면 하루하루 호수 넓어질 때마다 DFS를 돌려야 하므로 시간 초과(1500^3).
//  따라서 BFS를 사용해 최대로 움직인 위치를 저장하고 하루마다 얼음 녹으면 현재 위치에서 다시 탐색.
//  만약 근처에 오리 있다면 종료 후 날짜 출력.
// 3. 위 과정을 반복하면서 날짜를 세야 함.
//
// 처음엔 오리 2마리를 나누어서 움직임(L, R로 나누어 map에 표시) -> 현재 위치의 상하좌우에 다른 오리가 체크되어 있을 경우 meet가 true가 되고 종료하도록 구현. + 큐 4개 사용(오늘 오리 위치와 물의 위치, 내일 오리 위치와 물의 위치를 각각 저장)
// -> 메모리 초과.
// vector -> array, 함수에 인자 없애고 전역변수로 구현, 조건문 최대한 효율적으로 구현, swap -> while문 이용한 pop(), make_pair() 사용 등 여러가지 변경해보았으나 메모리 초과.
// 
// 오리 하나를 움직여 구현. -> 물에서는 하루에 얼마든지 이동 가능하므로 오리 한마리를 움직여 다른 오리 위치에 갈 수 있다면 굳이 두마리를 움직일 필요 없음. + map에 L과 R로 표시하면 물 업데이트와 충돌될 수 있고 visited 배열과도 역할 겹침.
//
// 다른 사람 코드와 비교해보아도 한참 찾지 못하다가 오리가 'X'에 부딪혀 duckNext에 저장할 때에도 visited를 체크해야함을 깨달음(큐에 X의 위치가 중복되어 저장되기 때문에 큐에 너무 많은 값이 저장되기 때문인 듯 + 다음날 'X'의 위치가 '.'로 바뀌고 그곳에서 시작하기 때문에 visited가 체크되지 않아 side effect 생길 수 있음).
// 고치니 통과. 
// 
// 메모리 초과가 배열이나 벡터의 사이즈가 너무 크거나, 재귀 함수 호출이 너무 많을 때 발생한다고 생각하여 큐에 너무 많은 값이 저장될 것이라고 생각하지 못해서 큐에 값이 저장되는 조건을 체크하지 못함.
//
// 이해, 재정의, 계획 단계보다 검증과 구현에서 실수하는 경우가 많은 듯. 
// 계획한 풀이법을 자료를 모두 사용했는가와 조건을 모두 만족하는가를 체크하며 검증해본 뒤, 모든 자료와 조건을 사용해 구현할 것.