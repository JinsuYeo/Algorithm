#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>

using namespace std;

int findIdx(char c) {

    if(c == 'U') return 1;
    else if(c == 'F') return 2;
    else if(c == 'D') return 3;
    else if(c == 'B') return 4;
    else if(c == 'L') return 5;
    else if(c == 'R') return 6;
    else return 0;
}

// 1 2 3
// 4 5 6
// 7 8 9
// 시계 방향으로 회전
void rotateSide(vector<vector<char>>& cube, int idx) {
    int t1 = cube[idx][2];
    int t2 = cube[idx][3];
    
    cube[idx][2] = cube[idx][4];
    cube[idx][3] = cube[idx][1];
    cube[idx][4] = cube[idx][8];
    cube[idx][1] = cube[idx][7];
    cube[idx][8] = cube[idx][6];
    cube[idx][7] = cube[idx][9];
    cube[idx][6] = t1;
    cube[idx][9] = t2;
}

void rotateF(vector<vector<char>>& cube) {
    int t1, t2, t3;
    t1 = cube[1][7];
    t2 = cube[1][8];
    t3 = cube[1][9];
    
    cube[1][7] = cube[5][9];
    cube[1][8] = cube[5][6];
    cube[1][9] = cube[5][3];
    
    cube[5][9] = cube[3][3];
    cube[5][6] = cube[3][2];
    cube[5][3] = cube[3][1];
    
    cube[3][3] = cube[6][1];
    cube[3][2] = cube[6][4];
    cube[3][1] = cube[6][7];
    
    cube[6][1] = t1;
    cube[6][4] = t2;
    cube[6][7] = t3;
}

void rotateL(vector<vector<char>>& cube, char dir) {
    deque<char> dq;
    for(int i = 1; i <= 4; i++) {
        for(int j = 1; j <= 7; j+=3){
            dq.push_back(cube[i][j]);
        }
    }
    
    if(dir == '-') {
        for (int i = 0; i < 3; i++) {
            dq.push_back(dq.front());
            dq.pop_front();
        }
    } else {
        for (int i = 0; i < 3; i++) {
            dq.push_front(dq.back());
            dq.pop_back();
        }
    }
    
    for(int i = 1; i <= 4; i++) {
        for(int j = 1; j <= 7; j+=3){
            cube[i][j] = dq.front();
            dq.pop_front();
        }
    }
}

void rotateR(vector<vector<char>>& cube, char dir) {
    deque<char> dq;
    for(int i = 1; i <= 4; i++) {
        for(int j = 3; j <= 9; j+=3){
            dq.push_back(cube[i][j]);
        }
    }
    
    if(dir == '-') {
        for (int i = 0; i < 3; i++) {
            dq.push_front(dq.back());
            dq.pop_back();
        }
    } else {
        for (int i = 0; i < 3; i++) {
            dq.push_back(dq.front());
            dq.pop_front();
        }
    }
    
    for(int i = 1; i <= 4; i++) {
        for(int j = 3; j <= 9; j+=3){
            cube[i][j] = dq.front();
            dq.pop_front();
        }
    }
}

void roll(vector<vector<char>>& cube) {
    vector<char> t = cube[4];
    cube[4] = cube[3];
    cube[3] = cube[2];
    cube[2] = cube[1];
    cube[1] = t;
    
    rotateSide(cube, 5);
    rotateSide(cube, 6);
    rotateSide(cube, 6);
    rotateSide(cube, 6);
}

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    int n, m;
    char side, dir;
    cin >> n;
    
    for (int i = 0; i < n; i++) {
        cin >> m;
        
        // 1 = U, 2 = F, 3 = D, 4 = B, 5 = L, 6 = R.
        vector<vector<char>> cube(7, vector<char>(10));
        cube[1] = vector<char>(10, 'w');
        cube[2] = vector<char>(10, 'r');
        cube[3] = vector<char>(10, 'y');
        cube[4] = vector<char>(10, 'o');
        cube[5] = vector<char>(10, 'g');
        cube[6] = vector<char>(10, 'b');
        
        for (int j = 0; j < m; j++) {
            cin >> side >> dir;
            
            int idx = findIdx(side);
            if(!idx) {
                cout << "idx error\n";
                return 0;
            }
            
            if(dir == '-') {
                rotateSide(cube, idx);
                rotateSide(cube, idx);
                rotateSide(cube, idx);
                
            } else {
                rotateSide(cube, idx);
            }
            
            if(idx == 5) {
                rotateL(cube, dir);
            } else if(idx == 6) {
                rotateR(cube, dir);
            } else {
                
                int cnt = 0;
                
                // 회전시킬 면이 F가 될 때까지 주사위를 굴림.
                while(idx != 2) {
                    cnt++;
                    idx++;
                    if(!(idx%5)) {
                        idx = 1;
                    }
                    
                    roll(cube);
                }
                
                if(dir == '-') {
                    rotateF(cube);
                    rotateF(cube);
                    rotateF(cube);
                } else {
                    rotateF(cube);
                }
                
                // 돌린 주사위를 원래대로 되돌림.
                while(cnt>0 && cnt < 4) {
                    cnt++;
                    roll(cube);
                }
            }
        }
        
        // 주사위 윗면을 출력.
        for (int i = 1; i <= 9; i++) {
            cout << cube[1][i];
            if(!(i%3)) cout << '\n';
        }
        
        cube.clear();
    }
    
    return 0;
}

// 첫 시도에 단순히 구현이 어려운 문제라 생각하고 모든 경우를 모두 하드 코딩하였으나 틀림.
// -> 디버깅을 도저히 할 수 없어 다른 사람의 풀이를 보다가 https://countrysides.tistory.com/19 참조하였으나 정확히 이해할 수 없었음. + 예상치 못한 변수 많았음(ex) B면을 처리할 때 L을 돌릴 때와 U를 돌릴 때 B에 저장된 숫자의 순서가 다르게 됨(B를 보는 방향이 전개도를 보는 방향인지, 전개도를 정육면체로 만든 후 뒷면을 보는 방향인지)).
// 그러나 단순히 하드 코딩하는 것이 아니라 다른 문제와 마찬가지로 문제를 풀 수 있는 접근법을 생각하여 풀 수 있는 문제라는 것을 깨달았고, 다시 계획 단계로 돌아가 접근법을 생각하였음.
//
//          1  2  3
//          4  5  6
//          7  8  9
// 10 11 12 19 20 21 28 29 30
// 13 14 15 22 23 24 31 32 33
// 16 17 18 25 26 27 34 35 36
//          37 38 39
//          40 41 42
//          43 44 45
//          46 47 48
//          49 50 51
//          52 53 54
//
// 1. 한 면을 시계 방향으로 회전하는 기능(시계 반대 방향은 시계 방향으로 3번 돌려서 구현 가능).
// 2. 주사위를 돌리는 기능(U->F->D->B->U, L과 R은 각각 시계와 시계 반대 방향으로 면 회전). (+ U면을 출력할 수 있도록 굴린 주사위를 원래대로 되돌리는 기능.)
// 3. F면의 인접한 면의 한 선을 시계 or 시계 반대 방향으로 회전하는 기능(F면을 시계 방향으로 회전: 7 8 9 -> 28 31 34 -> 39 38 37 -> 18 15 12 -> 7 8 9).
//
//  ->7  8  9 ->
// 12          28
// 15          31
// 18          34
// <- 37 38 39 <-
//
// 4. L면, R면의 인접한 면의 한 선을 시계 or 시계 반대 방향으로 회전하는 기능(L면을 시계 방향으로 회전: 1 4 7-> 19 22 25 -> 37 40 43 -> 46 49 52 -> 1 4 7).
//
// 1     3
// 4     6
// 7     9
// 19    21
// 22    24
// 25    27
// 37    39
// 40    42
// 43    45
// 46    48
// 49    51
// 52    54
//
// 위 방법으로 접근하여 중간에 예외(2번의 +) 있었으나 기능별로 접근하였기 때문에 디버깅이 쉬웠고 해결하여 통과할 수 있었음.
