#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int main() {
    
    iostream::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    
    int p, n, m;
    
    cin >> p;
    
    while (p--) {
        cin >> n >> m;
        vector<int> fib;
        fib.push_back(0);
        fib.push_back(1);
        
        
        int i = 2;
        while(1) {
            fib.push_back((fib[i-1] + fib[i-2]) % m);
            
            if(i > 1 && fib[i] == 1 && fib[i-1] == 0) {
                cout << n << " " << i-1 << '\n';
                break;
            }
            
            i++;
        }
        
        vector<int>().swap(fib);
    }
    
    
    return 0;
}

// 1. 피보나치 수열을 만드는 기능.
// 2. 피보나치 수열을 m으로 나눈 나머지를 구하는 기능.
// 3. 2에서 구하한 값들의 주기의 길이를 구하는 기능.
//
// m <= 1000000, test case의 수 * m <= 500000 이므로, 3을 구현하기 위해 O(n log n) 보다 작거나 같은 시간복잡도로 구현해야 함.
// 처음에 prefix function을 생각했으나, 주기의 최대 길이가 1000000이라면 시간복잡도가 초과되기 때문에 안됨.
// 따라서 (피보나치 수%m)을 구하는 동시에 주기를 찾는 기능을 구현.
//
// vector에 값을 추가하면서 새로운 값과 벡터에 저장된 값을 비교, 갱신하는 방식으로 구현했으나 틀림.
// 1. 피보나치 수열을 만들 때, overflow가 발생. -> 1과 2는 동시에 이루어져야 했음. 피보나치 수열을 만드는 횟수를 감소시키기 위해 1과 2를 나누었으나 틀린 생각이었음.
// 2.vector와 새로운 값을 비교할 때와 갱신할 때의 조건 문제 -> 시간복잡도를 줄이기 위해 (피보나치 수%m)의 결과가 0일 때, 비교 후 다르다면 갱신하는 방식 사용했으나 한 주기에 0이 여러번 나올 수 있었음.
// 3. 2번을 해결하기 위해 비교할 인덱스의 위치를 추가하여 비교하는 두 값이 같다면 갱신되지 않게 변경했으나 오류 발생 + 저장된 값과 새로운 값이 달라지는 모든 경우에 벡터간의 비교를 수행한다면 시간복잡도를 초과할 것이라 생각.
// -> 다른 사람 코드 보기로 결정.
//
// 결과적으로 0, 1이 연속해서 나온다면 주기가 끝나는 것으로 보고 풀 수 있었음. 문제에서 주어지지 않은 예외 상황을 너무 많이 고려하여 문제를 너무 복잡하게 만들어서 틀렸다고 볼 수 있을 것.
// -> 주어진 조건과 자료를 최대한 사용하되, 주어지지 않은 조건을 처리하기 위해 문제를 복잡하게 만드는 것은 피할 것.
// + 접근법을 유지하고도 조건과 구현 방법을 적절하게 생각했다면 풀 수 있었을 것으로 보임. -> 구현 연습 더 많이 필요, prefix function과 KMP 다시 공부하기.
