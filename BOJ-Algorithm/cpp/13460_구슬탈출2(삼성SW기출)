#include <algorithm>
#include <queue>
#include <iostream>
#include <string.h>

using namespace std;

struct phase {
    int rx, ry;
    int bx, by;
    int count;
};

int dirX[] = {-1, 1, 0, 0};
int dirY[] = {0, 0, -1, 1};

char g[11][11];
bool visited[11][11][11][11];

int N, M;
int RX, RY;
int BX, BY;

void move(int& x, int& y, int& dist, int& idx) {
    
    while(g[x + dirX[idx]][y + dirY[idx]] != '#' && g[x][y] != 'O') {
        x += dirX[idx];
        y += dirY[idx];
        dist++;
    }
}

void bfs(int rx, int ry, int bx, int by) {
    queue<phase> q;
    q.push({rx, ry, bx, by, 0});
    
    while(!q.empty()) {
        phase cur;
        memcpy(&cur, &q.front(), sizeof(phase));
        visited[cur.rx][cur.ry][cur.bx][cur.by] = true;
        q.pop();
        
        if (cur.count >= 10) {
            break;
        }
        
        for (int idx = 0; idx < 4; idx++) {
            int nextRx = cur.rx;
            int nextRy = cur.ry;
            int nextBx = cur.bx;
            int nextBy = cur.by;
            int rd = 0; int bd = 0;
            int nextCount = cur.count + 1;
            
            move(nextRx, nextRy, rd, idx);
            move(nextBx, nextBy, bd, idx);
            
            if (g[nextBx][nextBy] == 'O') {
                continue;
            }
            if (g[nextRx][nextRy] == 'O') {
                cout << nextCount;
                exit(0);
            }
            
            if (nextRx == nextBx && nextRy == nextBy) {
                if (rd > bd) {
                    nextRx -= dirX[idx];
                    nextRy -= dirY[idx];
                } else {
                    nextBx -= dirX[idx];
                    nextBy -= dirY[idx];
                }
            }
            
            if (!visited[nextRx][nextRy][nextBx][nextBy]) {
                q.push({nextRx, nextRy, nextBx, nextBy, nextCount});
            }
        }
    }
}


int main() {
    
    iostream::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N >> M;
    
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= M; j++) {
            cin >> g[i][j];
            if (g[i][j] == 'R') {
                RX = i;
                RY = j;
            }
            if (g[i][j] == 'B') {
                BX = i;
                BY = j;
            }
        }
    }
    
    bfs(RX, RY, BX, BY);
    
    cout << -1;
    
    return 0;
}

// BFS 사용, 제약조건 3가지(count <= 10 이내, 파란공이 구멍 통과 시 종료, 이전에 왔던 곳 돌아갈 필요 X(visited 사용해 체크)) 생각하고 풀이 시작(변경: 처음엔 DFS로 풀었으나 BFS가 더 적합하다고 생각 + 틀린 이후 다른 사람 코드보고 왔던 곳 제외 위해 visited 사용하도록 변경 + 참조형 사용. 코드 작성 전 코드 깔끔하게 작성할 수 있는 방법과 코드의 효율성 생각 필요)
// 틀린 이유
// 1. nextCount가 10보다 작거나 같아야 하므로 cur.count는 10보다 작아야 했음.
// 조건문 && 인지 || 인지 잘 생각하고 사용할 것.
// R, B가 동시에 들어가는 경우 체크 위해 line 58~63이 line 66~74보다 먼저 나와야 했음.