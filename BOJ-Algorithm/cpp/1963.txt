#include <iostream>
#include <algorithm>
#include <cstring>
#include <string>
#include <queue>
#include <vector>

using namespace std;

const int MAX = 10000;

int T, N, M;
bool prime[MAX];
vector<int> v;
bool visited[MAX];
queue<pair<int, int>> q;

int bfs(){
    q.push(make_pair(N, 0));
    visited[N] = true;
    
    while (!q.empty()) {
        int x = q.front().first;
        string s = to_string(x);
        int c = q.front().second;
        q.pop();
        
        if (x == M) {
            return c;
        }
        
        for (auto &i: v) {
            string t = to_string(i);
            int same{};
            for (int j{}; j < t.length(); j++) {
                if(t.at(j) == s.at(j)) same++;
            }
            if (same == 3 && !visited[i]) {
                q.push(make_pair(i, c+1));
                visited[i] = true;
            }
        }
    }

    return 0;
}

int main(void) {
    cin >> T;
    
    memset(prime, true, sizeof(prime));
    for (int i{2}; i < MAX; i++) {
        if (prime[i] == false) continue;
        for (int j{i+i}; j < MAX; j+=i) {
            prime[j] = false;
        }
    }
    
    for (int i{1000}; i < MAX; i++) {
        if (prime[i]) {
            v.push_back(i);
        }
    }
    
    for(int i{}; i < T; i++) {
        while (!q.empty()) {
            q.pop();
        }
        memset(visited, false, sizeof(visited));
        
        cin >> N >> M;
        
        if (N == M) {
            cout << 0 << '\n';
            continue;
        }
        
        cout << bfs() << '\n';
    }
        
    return 0;
}

// 4자리 소수 2개 입력받아서, 한번에 한자리 씩 바꾸면서(바뀔때도 소수여야 함) 첫번째 입력된 소수 -> 두번째 소수로 바꾸기 위해 몇번 바꾸어야 하는지 출력.
// ex) 1033 -> 1733 -> 3733 -> 3739 -> 3779 -> 8779 -> 8179

// 에라토스테네스의 체로 소수들만 배열에 저장해놓은 뒤, 입력에서 한자리만 바꾼 소수가 배열에 있는 지 확인. 여러개 있다면 BFS로 하나씩 이동하며 탐색.

// 4자리수여야 함(0033(x)).
// -> 에라토스테네스 체 체크할 때 1000~9999만 탐색.

// 반복문과 문자열 이용해서 1자리씩 비교하면서 3자리만 같은 수 체크.
// int형이랑 char 비교할 일 생기면 char -'0' 잊지 말 것.

// 생각보다 소수가 많아서 시간이 오래 걸림(다 풀고보니 visited 체크 안해서 그런 것이었음) + 한자리만 다른 소수도 상당히 많음 -> 벡터에 소수만 따로 저장해줌.

// 디버깅하다가 visited 문제라는 것 깨닫고 visited 체크하고 한번 BFS 끝날 때마다 visited, queue 초기화 해줌. 앞으로도 잊지 말 것.

// 지금까지 알고리즘 풀면서 배웠던 모든 것 사용해서 딱 적당한 시간 안에 푼 문제인 듯. 풀고나서 성취감이 아주 큰 문제였음. 에라토스테네스의 체와 BFS, memset(), queue와 벡터같은 자료구조까지 많은 것 알고있어야 풀 수 있는 문제인 듯.