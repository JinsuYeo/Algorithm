#include <iostream>

using namespace std;

long long dp[201][201];

int main(int argc, const char * argv[]) {
    int k{}, n{};
    cin >> n >> k;
    
    for(int i{}; i <= n; i++) {
        dp[1][i] = 1;
    }
    
    for(int i{1}; i <= k; i++) {
        dp[i][0] = 1;
    }
    
    for(int i{2}; i <= k; i++) {
        for(int j{1}; j <= n; j++) {
                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % 1000000000;
                dp[i][j] %= 1000000000;
            }
    }
    
    cout << dp[k][n] << endl;
    
    return 0;
}

// 알고리즘 생각 못해서 다른 사람거 참고해서 풀었음. 나중에 한번 더 풀어볼 것.
// 처음에는 dp[k][n] = dp[k-1][0]+ dp[k-1][1] + dp[k-1][2] + ... + dp[k-1][n];을 이용해 풀었고 전에 비슷한 방식의 코드를 dp[k][n] = dp[k-1][n] + dp[k][n-1];로 바꿔서 풀었던 기억이 나서 시도해 보았는데 출력은 정상인데 틀렸다고 나와서(+다른 사람의 비슷한 코드는 정답이 나오길래) 계속 수정해본 결과 아마 dp[2][0]처럼 dp[k][0-1] 같이 사용하지 않는 메모리 영역 침범하는 경우 때문인 것 같아서 수정해 보았는데 정답이 나왔음.
// + 초기조건을 먼저 찾고, 그 조건을 dp[0]의 경우로 생각한 후 그 다음을 생각하는 방식으로 해보기(동적 프로그래밍적 사고? 배열로 생각해보기).