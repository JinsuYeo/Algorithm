#include <iostream>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>

using namespace std;

const int MAX {2002};

int N;
typedef struct{
    int x1;
    int x2;
    int y1;
    int y2;
} RECT;

typedef struct{
    int x;
    int y;
} DIR;
DIR dir[4] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

vector<RECT> rects;
bool arr[MAX][MAX]; // 직사각형 그릴 배열(-500 ~ 500)
bool visited[MAX][MAX];

int C;

void dfs(int x, int y){
    visited[y][x] = true;
    
    for (int i{}; i < 4; i++) {
        int nexty = y + dir[i].y;
        int nextx = x + dir[i].x;
        
        if (nexty < 0 || nexty >= MAX || nextx < 0 || nextx >= MAX) {
            continue;
        }
        if (!visited[nexty][nextx] && arr[nexty][nextx]) {
            dfs(nextx, nexty);
            visited[nexty][nextx] = true;
        }
    }
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N;
    for (int i{}; i < N; i++) {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        RECT rect = {(x1 + 500)*2, (x2 + 500)*2, (y1 + 500)*2, (y2 + 500)*2};
        rects.push_back(rect);
    }
    
    for (int i{}; i < rects.size(); i++) {
        RECT rect = rects[i];
        memset(*(arr + rect.y1) + rect.x1, 1, rect.x2-rect.x1 + 1);
        memset(*(arr + rect.y2) + rect.x1, 1, rect.x2-rect.x1 + 1);
        for (int j{rect.y1}; j <= rect.y2; j++) {
            arr[j][rect.x1] = 1;
        }
        for (int j{rect.y1}; j <= rect.y2; j++) {
            arr[j][rect.x2] = 1;
        }
    }
    bool zero{false};
    for(int i{}; i < MAX; i++) {
        for (int j{}; j < MAX; j++) {
            if (arr[i][j] && !visited[i][j]) {
                C++;
                dfs(j, i);
            }
        }
    }
    if (arr[1000][1000]) {
        zero = true;
    }
    
    if (zero) {
        C--;
    }
    
    cout << C;
    
    return 0;
}

// (0, 0) 위치에서 y축이 증가하는 방향 보고있고, 연필은 내리고 있음.
// PU의 횟수 구하는 프로그램 만들어야 함.

// 1. 직사각형이 0, 0에서 시작하는지 체크하고 아니면 count++
// 2. 직사각형 여러개일 때, 겹치는 부분 있는지 확인. 안겹친다면 count + 안겹치는 사각형의 수.

// 겹치는지 판단하는 방법은 x1~x2, y1~y2 사이에 다른 사각형의 모서리나 꼭짓점이 있는 경우를 체크하면 됨.
// 처음에 구조체 배열로 입력된 직사각형들 담고 이중배열로 모두 비교하려다가, 구조체 배열 초기화도 그렇고, 체크해야할 조건 너무 많아서 모든 조건 체크할 수 있는 방법 생각하다가 직사각형을 그래프로 그리고, dfs로 체크하면 되겠다 생각함.
// 이차원 배열에 직사각형의 위치를 1로 모두 초기화해준 뒤, 1이면서 visited되지 않은 곳 좌표 넣어서 dfs 실행해줌. count++

// 0, 0도 체크해주고, -500~500이 입력값이니 +500해서 입력받음.
// 그래프 그릴 때, 가장 최악의 시간복잡도는 1000*1000*1000이니 3중 반복 사용못해서 모서리 별로 나눠서 초기화 해줌.

// 맞는 것 같은데 틀리길래 배열 출력해서 그래프 직접 보니 실제로 겹치진 않지만 바로 옆에 위치해서 1이 붙어있는 경우 발생함.
// ex) 1 1 1 1 1 1
//     1 0 1 1 0 1
//     1 1 1 1 1 1

// 어떻게 해결할까 하다가 그릴 때 처리하면 되지 않을까 싶어서 dfs말고 그릴 때 이미 1로 초기화되어 있으면 count 세주는 식으로 구현해봄.
// 이번엔 진짜 맞는줄 알았는데 틀리길래 반례보니 그리는 순서에 따라 다 그린 후에는 겹치는데 그릴 때는 겹치지 않는 경우가 있었음. 해결하려다가 하나 고치면 다른 문제가 생기는 식이라 결국 포기하고 다른사람 코드보고 풂.
// -> dfs 코드 짠 것에서 배열과 직사각형 좌표를 2배씩 해주니 정답이었음. 크기를 2배씩 늘리면 실제로는 겹치지 않지만 바로 옆에 있어서 dfs 처리되던 그래프들이 겹치지 않게됨.

// 사실 그릴 때 체크하는 방식 구현하기 전에 생각해본 방법이긴 해서 너무 아쉬웠음. 시간은 엄청 잡아먹었는데 그 때 그쪽으로 생각을 좀 더 발전 시켰으면 풀 수 있던 문제라는게 너무 아쉬웠음.
// 완전 탐색 문제는 시간 많이 쓰더라도 일단 풀어보는게 좋을 것 같음. 구현 연습도 많이되고 창의적으로 생각하는 연습도 되는 것 같음.

완전 탐색은 2시간 제한두고 풀기.