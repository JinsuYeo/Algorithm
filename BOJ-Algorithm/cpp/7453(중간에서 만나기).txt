#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 4000;

int N;
long long result;
long long arr[4][MAX];

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N;
    for (int i{}; i < N; i++) {
        for (int j{}; j < 4; j++) {
            cin >> arr[j][i];
        }
    }
    
    vector<long long> v;
    for (int i{}; i < N; i++) {
        for(int j{}; j < N; j++) {
            v.push_back(arr[2][i] + arr[3][j]);
        }
    }
    
    sort(v.begin(), v.end());
    
    for (int i{}; i < N; i++) {
        for (int j{}; j < N; j++) {
            long long num = arr[0][i] + arr[1][j];
            long long low = lower_bound(v.begin(), v.end(), -num) - v.begin();
            long long high = upper_bound(v.begin(), v.end(), -num) - v.begin();
            
            if (-num == v[low]) {
                result += high-low;
            }
        }
    }
    
    cout << result << "\n";
    
    
    return 0;
}

// 완전 탐색 연습 백준 7453번 합이 0인 네 정수
// 시간 제한 12초, 크기가 같은 정수 배열 A, B, C, D가 있고 배열 크기는 1~4000.
// A[a] + B[b] + C[c] + D[d]가 0인 (a, b, c, d)의 쌍의 개수 구하여 출력.

// 처음에 생각한 방법은 A, C는 오름차순, B, D는 내림차순으로 정렬하여 A[0] + B[0] + C[0] + D[0]부터 시작해서 0보다 크면 D 증가시키고 D끝날때까지 없으면 그 후 B를 하나 증가시킨 후 다시 D를 증가시키고 만약 0보다 작으면 C를 증가시키고... 반복하며 완전탐색 하는 것이었음. 처음에는 투포인터를 생각하고 알고리즘을 생각했는데 중간에 이렇게 하면 완전탐색이라 O(N^4)으로 시간초과 난다는 것 알게됨(4000*4000*4000*4000).

// 다른사람 코드 보니
// -> 3, 4번 배열(C, D)만 모든 가능한 합 구해서 저장해놓은 뒤(오름차 순), 1, 2번 배열의 모든 합에 음의 부호 붙인 수가 미리 저장한 배열에 있는 지 찾아서, lower_bound 와 upper_bound 이용해 개수 구하여 결과를 출력하는 방법으로 구현.
// 이렇게 하면 4000*4000*log(4000*4000)(lower_bound의 시간복잡도는 logN)으로 시간 충분(약 1억).

// 참고) 포인터 - 포인터는 두 주소 사이의 거리 반환하므로 (합이 0인 수가 있을 때)upper_bound의 결과 - lower_bound의 결과 해주면 합이 0인 개수가 나옴.

// + 이러한 알고리즘이 중간에서 만나기 알고리즘 이라고 함.
// 간단하게, 처리해야 하는 것 2가지로 쪼갠 뒤 각각을 처리해서 합치는 것이 분할 정복이라면, 2가지로 쪼갠 뒤 합칠 때 앞의 정보를 가지고 합치는 것이 중간에서 만나기임(즉, A, B로 나눠서 A를 먼저 처리하고 나서 A의 데이터를 기반으로 B를 처리해주는 방식).
// 참조) https://dasu.tistory.com/35
