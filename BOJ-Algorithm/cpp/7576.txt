#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;

int n, m, c, nc;
int arr[1001][1001];
int visited[1001][1001];
queue<pair<int, int>> q;

int checki[4] = {0, 0, -1, 1};
int checkj[4] = {-1, 1, 0, 0};

void bfs(){
    long s = q.size();
    while(s) {
        int x, y;
        x = q.front().first;
        y = q.front().second;
        q.pop();
        s--;
        for(int i{}; i < 4; i++) {
            int ci = x + checki[i];
            int cj = y + checkj[i];
            
            if(ci >= 1 && ci <= n && cj >= 1 && cj <= m) {
                if(arr[ci][cj] == 0) {
                    q.push(pair<int, int> {ci, cj});
                    arr[ci][cj] = 1;
                    nc--;
                }
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> m >> n;
    
    for(int i{1}; i <= n; i++) {
        for (int j{1}; j <= m; j++) {
            cin >> arr[i][j];
            if(arr[i][j] == 1) q.push(pair<int, int>{i, j});
            if(arr[i][j] == 0) nc++;
        }
    }
    
    while(!q.empty()){
        c++;
        bfs();
    }
    c--;
    
    if(!nc) cout << c <<"\n";
    else cout << -1 << "\n";
    
    return 0;
}

// visited가 0이고 1이 들어간 곳부터 bfs돌림.
// 1의 상하좌우 중 0이 있는 곳 있으면 1로 바꿔줌. 1은 visited 처리하고 count++. 로 하려고 했는데 배열 크기가 너무커서 선형시간이여도 시간 초과 날 것 같아서 방법을 생각해보다가 알고리즘 자체는 비슷한데 visited 사용하지 않고 큐에 1이 있는 위치를 pair로 담아서 큐를 이용해 생각한 알고리즘 구현했음. + count나 bfs 후 0이 있는지 체크도 bfs돌리면서 동시에 처리해서 배열 한번 더 반복할 필요 없게 구현 했음.

// 알고리즘 생각 + 시간 복잡도 생각 + 구현 방법 생각까지 만족스럽게 해서 푼 문제인듯.