struct BIT {
    vector<int> tree;

    void init(int size) {
        tree.resize(size+1);
    }

    void add(int pos, int delta) {
        pos++;
        while (pos < tree.size()) {
            tree[pos] += delta;
            pos += pos & -pos;
        }
    }

    int sum(int pos) {
        int res = 0;

        pos++;
        while (pos > 0) {
            res += tree[pos];
            pos &= pos - 1;
        }

        return res;
    }

    int sumRange(int left, int right) {
        int res = sum(right);
        if (left > 0) {
            res -= sum(left-1);
        }
        return res;
    }
};

class NumArray {
public:

    BIT bit;
    vector<int> value;

    NumArray(vector<int>& nums) {
        bit.init(nums.size());
        value.resize(nums.size());

        for(int i = 0; i < nums.size(); i++) {
            bit.add(i, nums[i]);
            value[i] = nums[i];
        }
    }
    
    void update(int index, int val) {
        bit.add(index, val - value[index]);
        value[index] = val;
    }
    
    int sumRange(int left, int right) {
        return bit.sumRange(left, right);
    }
};

// 값을 변경하는 경우 구간 합 -> 펜윅 트리(Binary indexed tree)로 구현.

struct SegmentTree {
    int N;
    vector<int> tree;

    void build(vector<int>& nums) {
        N = nums.size();
        tree.resize(N*4);

        buildRec(nums, 1, 0, N-1);
    }

    int merge(int left, int right) {
        return left + right;
    }

    void update(int index, int val) {
        updateRec(index, val, 1, 0, N-1);
    }

    int query(int left, int right) {
        return queryRec(left, right, 1, 0, N-1);
    }

    int buildRec(vector<int>& nums, int node, int nodeLeft, int nodeRight) {
        if(nodeLeft == nodeRight) {
            return tree[node] = nums[nodeLeft];
        }

        int mid = (nodeLeft+nodeRight)/2;
        int leftVal = buildRec(nums, node*2, nodeLeft, mid);
        int rightVal = buildRec(nums, node*2+1, mid+1, nodeRight);
        return tree[node] = merge(leftVal, rightVal);
    }

    int queryRec(int left, int right, int node, int nodeLeft, int nodeRight) {
        if(right < nodeLeft || nodeRight < left){
            return 0;
        }

        if(left <= nodeLeft && nodeRight <= right) {
            return tree[node];
        }

        int mid = (nodeLeft+nodeRight)/2;
        int leftVal = queryRec(left, right, node*2, nodeLeft, mid);
        int rightVal = queryRec(left, right, node*2+1, mid+1, nodeRight);
        return merge(leftVal, rightVal);
    }

    int updateRec(int idx, int newVal, int node, int nodeLeft, int nodeRight) {
        if(idx < nodeLeft || nodeRight < idx) {
            return tree[node];
        }

        if(nodeLeft == nodeRight) {
            return tree[node] = newVal;
        }

        int mid = (nodeLeft+nodeRight)/2;
        int leftVal = updateRec(idx, newVal, node*2, nodeLeft, mid);
        int rightVal = updateRec(idx, newVal, node*2+1, mid+1, nodeRight);
        return tree[node] = merge(leftVal, rightVal);
    }
};

class NumArray {
public:
    SegmentTree seg;

    NumArray(vector<int>& nums) {
        seg.build(nums);
    }
    
    void update(int index, int val) {
        seg.update(index, val);
    }
    
    int sumRange(int left, int right) {
        return seg.query(left, right);
    }
};

// 값을 변경하는 경우 구간 합 -> Segment Tree로 구현.