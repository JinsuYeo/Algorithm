class Solution {
public:
    int change(int amount, vector<int>& coins) {
        
        vector<int> dp(amount+1);

        dp[0] = 1;
        for (int i = 0; i < coins.size(); i++) {
            for(int j = coins[i]; j <= amount; j++) {
                if(dp[j - coins[i]] > 0) {
                    dp[j] += dp[j - coins[i]];
                }
            }
        }

        return dp[amount];
    }
};

// Unbounded knapsack 이용해 구현.
// 처음에는 j == coins[i]인 경우 dp += dp[j-coins[i]]+1, 
// dp[j - coins[i]] > 0인 경우 dp[j] += dp[j - coins[i]] 로 구현하였으나 틀림.
// dp[0] = 1로 초기화 후 위의 두가지 경우 모두 dp[j] += dp[j - coins[I]]로 구현하여 통과.
// 
// dp[amount]는 coins[0]~coins[i]까지 사용하여 amount를 만들 수 있는 경우의 수를 저장.
// ex) amount = 5, coins = [1,2,5]
// 순서대로
// 5=1+1+1+1+1  -> dp[5] += dp[1](== dp[0~5] = 1)
//
// 5=2+2+1      -> dp[5] += dp[3](== dp[5-2] = 2)
// 5=2+1+1+1    
//
// 5=5          -> dp[5] += dp[0](== dp[5-5] = 1)
