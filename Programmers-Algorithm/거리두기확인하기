#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

#define O 0
#define P 1
#define X -1


using namespace std;

bool res = true;
vector<vector<bool>> visited(5, vector<bool>(5));

int dirX[4] = {-1, 1, 0, 0};
int dirY[4] = {0, 0, -1, 1};

void dfs(const vector<vector<int>>& map, int x, int y, int dist) {
    if(dist >= 2) return;
    
    visited[x][y] = true;
    
    for(int i = 0; i < 4; i++) {
        int nx = x + dirX[i];
        int ny = y + dirY[i];
        
        if(nx < 0 || nx >= 5 || ny < 0 || ny >= 5) continue;
        if(map[nx][ny] == X) continue;
        if(map[nx][ny] == P && !visited[nx][ny]) {
            res = false;
            break;
        }
        dfs(map, nx, ny, dist+1);
    }
    
    visited[x][y] = false;
}

vector<int> solution(vector<vector<string>> places) {
    vector<int> answer;
    
    for(int i = 0; i < places.size(); i++) {
        
        vector<vector<int>> map(5, vector<int>(5));
        for(int j = 0; j < places[i].size(); j++) {
            string s = places[i][j];
            for(int k = 0; k < s.length(); k++) {
                if(s[k] == 'P') {
                    map[j][k] = P;
                } else if(s[k] == 'O') {
                    map[j][k] = O;
                } else if(s[k] == 'X') {
                    map[j][k] = X;
                }
            }
        }
        
        for(int j = 0; j < 5; j++) {
            for(int k = 0; k < 5; k++) {
                if(map[j][k] == P) {
                    dfs(map, j, k, 0);
                }
            }
        }
        
        answer.push_back(res);
        res = true;
    }
    
    return answer;
}

// DFS 이용해 구현.