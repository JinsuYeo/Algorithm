#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <map>

using namespace std;

vector<string> user;
vector<string> banned;
vector<bool> visited;
map<string, int> m;
int res = 0;

bool check(int userIdx, int bannedIdx) {
    string userId = user[userIdx];
    string bannedId = banned[bannedIdx];
    
    if(userId.length() != bannedId.length()) return false;
    for(int i = 0; i < bannedId.length(); i++) {
        if(bannedId[i] == '*') continue;
        if(userId[i] != bannedId[i]) return false;
    }
    
    return true;
}

void comb(vector<string>& v, int count) {
    if(count >= banned.size()) {
        set<string> t(v.begin(), v.end());
        string str = "";
        for(auto it = t.begin(); it != t.end(); it++) {
                str += *it + " ";
            }
        if(count == t.size() && !m[str]) {
            res++;
            m[str]++;
        }
        return;
    }

    for(int i = 0; i < user.size(); i++) {
        if(check(i, count) && !visited[i]) {
            v.push_back(user[i]);
            visited[i] = true;
            comb(v, count+1);
            visited[i] = false;
            v.pop_back();
        }
    }
}

int solution(vector<string> user_id, vector<string> banned_id) {
    user = user_id;
    banned = banned_id;
    visited.resize(user.size());
    vector<string> v;
    comb(v, 0);
    
    return res;
}

// 완전탐색 이용해 구현. -> 완전탐색을 사용할 수 있는지부터 생각할 것.
// 30분 소요.