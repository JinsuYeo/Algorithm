import java.util.Arrays;
import java.util.Collections;

class Solution
{
    public int solution(int []A, int []B)
    {
        int answer = 0;

        Arrays.sort(A);
        Arrays.sort(B);


        for (int i = 0; i < A.length; i++) {
            answer += A[i] * B[B.length - 1 - i];
        }

        return answer;
    }
}

// Java 정렬, int[] to Integer[]
// Arrays.sort() 이용해 오름차순 정렬 가능
// primitive type은 Array.sort(arr, Collections.reverseOrder())처럼 내림차순 정렬할 수 없어서 wrapper class로 boxing 해주어야 함.
// ex) Integer[] arr2 = Arrays.stream(arr1).boxed().toArray(Integer[]::new);
// 처음에는 한 배열은 오름차순, 다른 배열은 내림차순 정렬하여 배열의 처음부터 곱 연산하여 구현
// 그러나 시간 초과 되어서 위의 방법처럼 한 배열은 처음부터, 다른 배열은 끝부터 곱 연산 하는 방식으로 구현
