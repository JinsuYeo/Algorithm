#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>

using namespace std;

vector<int> v;
bool visited[8];
vector<int> sorted;

int T, N, result, sum;

void dfs(int start) {
    if (sorted.size() == v.size()) {
        for (int i{1}; i < sorted.size(); i++) {
            sum += abs(sorted.at(i-1) - sorted.at(i));
        }
        result = max(result, sum);
        sum = 0;
    }
    for (int i{}; i < v.size(); i++) {
        if (!visited[i]) {
            visited[i] = true;
            sorted.push_back(v.at(i));
            dfs(i);
            visited[i] = false;
            sorted.pop_back();
        }
    }
}

int main(void){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> T;
    for (int i{}; i < T; i++) {
        cin >> N;
        v.push_back(N);
    }
    
    sort(v.begin(), v.end());
    
    for (int i{}; i < v.size(); i++) {
        visited[i] = true;
        sorted.push_back(v[i]);
        dfs(i);
        sorted.pop_back();
        visited[i] = false;
    }
    
    cout << result << '\n';
    
    return 0;
}

// 입력 개수는 8개가 최대, 위치를 모두 바꿔가며 비교해도 됨(N!번).
// 첫번째 수 바꾸는 경우의 수 N개, 1~N, 두번째 수 바꾸는 경우의 수 N-1개(첫번째 자리에 사용된 수 제외한 수의 개수), ... , 마지막 자리는 1개만 가능. -> N!, nPn.
// ex) 1 2 3
//     1 3 2
//     2 1 3
//     2 3 1
//     3 1 2
//     3 2 1

// 그런데 모든 자리를 바꿔가며 비교하는 것을 어떻게 구현할 지 생각이 잘 안남. 처음에는 반복문을 n번 넣어야 하나 하다가, 도저히 모르겠어서 다른 사람 코드 보고 풀려다가 DFS 사용한 것 보고 DFS 직접 구현해서 풂. 완전 탐색은 BFS나 DFS 사용해 구현 할 수 있는 듯.