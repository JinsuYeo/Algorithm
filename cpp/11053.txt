#include <iostream>
#include <algorithm>

using namespace std;

int dp[1001], arr[1001];

int main(int argc, const char * argv[]) {
    int n{}, max{1};
    cin >> n;
    for (int i {1}; i <= n; i++) {
        cin >> arr[i];
    }
    
    dp[1] = 1;
    for(int i {2}; i <= n; i++) {
        dp[i] = 1;
        for(int j{1}; j <= i-1; j++) {
            if(arr[j] < arr[i] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
            }
        }
        if(max < dp[i]) max = dp[i];
    }
    
    cout << max << endl;
    
    return 0;
}

// 입력된 수열의 위치별 숫자의 가능한 긴 수열의 길이를 dp 배열에 저장해 놓은 뒤 동적 프로그래밍으로 처리(이미 저장된 가장 긴 길이(dp[j]) 위치의 숫자(arr[j])보다 큰 수가 뒤에 존재(arr[i])할 때 dp[i]+1).
// 초기조건 생각하기(max를 1로 초기화해놔야 1개의 숫자만 입력되었을 떄 1이 나옴).