#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int t;
long long n, result;
long long arr[100001];
bool visited[100001];
vector<pair<int, int>> vec[100001];

void dfs(int start) {
    visited[start] = 1;
    
    for (int i{}; i < vec[start].size(); i++) {
        int x = vec[start][i].first;
        int len = vec[start][i].second;
        if(!visited[x]) {
            arr[x] = arr[start] + len;
            if (arr[x] > result) {
                result = arr[x];
                t = x;
            }
            dfs(x);
        }
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> n;
    for(int i{}; i < n-1; i++) {
        int a, b{}, c;
        cin >> a;
        cin >> b;
        while(b != -1) {
            cin >> c;
            vec[a].push_back(make_pair(b, c));
            vec[b].push_back(make_pair(a, c));
            cin >> b;
        }
    }
    

    dfs(1);
    memset(arr, 0, sizeof(arr));
    memset(visited, false, sizeof(visited));
    dfs(t);
    
    cout << result;
    
    return 0;
}


// 그래프 그린 뒤 그릴 때 간선의 길이도 저장. 벡터에 페어로 푸시해줌.
// dfs해서 간선의 길이가 가장 긴 것 출력. -> 시간 초과.
// 반복 수 줄일 방법 찾다가 연결된 간선이 하나인 정점(leaf)만 찾아서 반복해봄. -> 틀렸습니다.
// 게시판 반례 모두 정답이었지만 어디에 에러가 있는 것인지 아니면 리프가 아닌 정점이 최대 거리를 가질 수 있는 건지 알 수 없어서 결국 다른 사람 코드를 보고 풂.

// 트리의 지름 구하는 알고리즘이 따로 있었음.
// 1. 트리에서 임의의 정점 x를 찾는다.
// 2. 정점 x에서 가장 먼 정점 y를 찾는다.
// 3. 정점 y에서 가장 먼 정점 z를 찾는다.
// -> y와 z를 연결하는 경로가 트리의 지름임.

// 1시간 풀다가 정답이 안나오면 일단 다른 사람의 코드를 보는 것이 좋을 듯.
// 내 풀이 방법이 맞을 수도 있지만 반례, 에러 찾는 시간이 너무 오래 걸리고 결국 못찾을 수도 있어서 + 이렇게 알고리즘만 알면 쉽게 풀 수 있는 문제일 수도 있어서.

// 결국 리프의 최대 거리 구하는 방법이 틀린 이유는 vector[i].size() 가 2인 것이 리프인데 1로 체크해서였음(비방향성 그래프라 푸시가 두번 씩됨). -> 리프만 체크해도 시간 초과됨.

// 트리의 지름 구하기 증명
// https://blog.myungwoo.kr/112 참고.