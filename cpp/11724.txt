#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int visited[1001];
int v, e, c;
vector<int> arr[1001];

int connected(int node){
    if(visited[node]) return true;
    visited[node] = true;
    for(int i{}; i < arr[node].size(); i++) {
        int x = arr[node][i];
        connected(x);
    }
    return false;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    cin >> v >> e;
    for(int i{}; i < e; i++) {
        int x, y;
        cin >> x >> y;
        arr[x].push_back(y);
        arr[y].push_back(x);
    }
    
    for(int i{1}; i <= v; i++) {
        int check = connected(i);
        if(!check) c++;
    }
    
    cout << c << "\n";
    
    return 0;
}

// 그래프 구현해준 뒤, 1~n번 노드 순서로 반복문 돌려서 시작 노드가 이미 방문되었는지 체크하고 . 방문 안되었다면 연결된 노드들 모두 방문 처리 해주고 count 세줌. 이미 시작 노드가 방문 되었다면 count 세지 않음. -> 방문 안 했었다면 새로운 연결 요소이고 이미 시작 노드가 방문 처리 되었다면 다른 노드에서 이미 세준 연결 요소이기 때문.
// count를 출력.

// 그래프를 직접 그린 후 생각하니 나름 쉽게 풀 수 있었음.
// 풀고 다른 사람 풀이보니 생각 못했는데 나는 dfs로 푼것임. -> dfs나 bfs로 그래프 순회한 뒤 방문한 곳 체크하고, 안된 곳은 끊어진 곳이니 bfs를 한 횟수가 연결 요소의 개수임.