#include <iostream>
#include <algorithm>
#include <math.h>
#include <string.h>
#include <queue>

#define EMPTY 0
#define WALL 1
#define VIRUS 2

using namespace std;

struct block {
	int x;
	int y;
};

int N, M;

int map[10][10];
int origin[10][10];

int dirX[4] = { -1, 1, 0, 0 };
int dirY[4] = { 0, 0, -1, 1 };

queue<block> q;

int res = 0;

void init() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (origin[i][j] == VIRUS) {
				q.push({i, j});
			}
		}
	}

	memcpy(map, origin, sizeof(int) * 100);
}

void check() {
	int count = 0;

	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (map[i][j] == EMPTY) count++;
		}
	}

	if (count > res) res = count;
}

void bfs() {
	init();

	while (!q.empty()) {
		
		int x = q.front().x;
		int y = q.front().y;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dirX[i];
			int ny = y + dirY[i];

			if (map[nx][ny] == EMPTY) {
				q.push({ nx, ny });
				map[nx][ny] = VIRUS;
			}
		}
	}

	check();
}

void bf(int x, int y, int c) {
	if (c >= 3) {
		bfs();
		return;
	}

	for (int i = x; i <= N; i++) {
		for (int j = x == i ? y : 1; j <= M; j++) {
			if (origin[i][j] == EMPTY) {
				origin[i][j] = WALL;
				bf(x, y + 1, c + 1);
				origin[i][j] = EMPTY;
			}

		}
	}
}

int main() {

	iostream::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> N >> M;

	for (int i = 0; i <= N + 1; i++) {
		for (int j = 0; j <= M + 1; j++) {
			if (i == 0 || i == N + 1 || j == 0 || j == M + 1) {
				origin[i][j] = WALL;
				map[i][j] = WALL;
			}
			else {
				cin >> origin[i][j];
				map[i][j] = origin[i][j];
			}
		}
	}

	
	bf(0, 0, 0);

	cout << res;

	return 0;
}

// 완전 탐색으로 기둥 세우고, 기둥 세워진 상태에서 BFS로 0개수 체크하여 구현.
//
// 조건 잘못 이해해 시간 초과(기둥 딱 3개 세워야 함) 후 조건 만족시키고 효율 더 좋게 구현하여 통과.