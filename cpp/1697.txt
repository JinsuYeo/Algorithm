#include <iostream>
#include <algorithm>
#include <array>
#include <queue>

using namespace std;

const int MAX = 100001;

int N, K;
bool subin[MAX];

int bfs(){
    queue<pair<int, int>> q;

    subin[N] = true;
    q.push(make_pair(N, 0));
    
    while (!q.empty()) {
        int x = q.front().first;
        int c = q.front().second;
        q.pop();
        
        if (x == K)
            return c;

        
        if (x+1 < MAX && !subin[x+1]) {
            q.push(make_pair(x+1, c+1));
            subin[x+1] = true;
        }
        if (x-1 >= 0 && !subin[x-1]) {
            q.push(make_pair(x-1, c+1));
            subin[x-1] = true;
        }
        if (x*2 < MAX && !subin[x*2]) {
            q.push(make_pair(x*2, c+1));
            subin[x*2] = true;
        }
    }
    return 0;
}

int main(void) {
    cin >> N >> K;
    
    cout << bfs() << "\n";
    
    return 0;
}

// 1초 후 x-1 or x+1 -> 즉 현재위치 +-1 or x*2의 위치로 이동 가능.
// 동생을 찾을 수 있는 가장 빠른 시간 구해서 출력.

// 알고리즘 분류에서 그래프 탐색인 것 보고 그래프 이용해서 풂.
// 만약 안봤으면 그래프 생각 안했을 듯. 완전 탐색이면 일단 그래프, 재귀함수부터 생각하기.

// 처음에 DFS로 하다가 시간이 너무 오래걸려서 이게 맞나하고 다른 사람 코드보니ㅣ BFS 이용해서 푸는 문제였음.
// 그래프 연습할 때는 이런 문제 잘 풀었던 것 같은데 완전 탐색 연습할 때는 이상하게 잘 안풀리는 것 같음. 특히 알고리즘 생각을 잘 못함. 너무 어렵게 생각하고 있는듯.

// -> BFS로 한번 이동할 때마다 체크(pair로 위치, 시간 저장)해서 도달하면 시간을 리턴해서 출력함(BFS에서 가장 적게 반복한 결과가 가장 빠른 시간일 것임).

// 중요) 똑같은데 왜 틀리지하면서 계속 틀리다가(segfault, outofbound) 결국 찾았는데, 지금까지 틀렸던 것 중에도 있었을 수 있음.
// -> 조건문에서 조건 체크할 때 && 사용 시 어차피 모두 true여야 실행되니까 순서 상관 없다고 생각했었는데, 이 문제처럼(28, 32, 36번 줄) 범위가 맞으면 배열에서 확인하는 조건같은 경우(if(x+1 < MAX && !visited[x+1])),  순서 바뀌면 배열의 범위를 벗어날 수 있어서 에러남(!visited[x+1]이 먼저오면 x+1이 MAX보다 클 경우 에러남).
// -> 앞으로  조건문의 블록은 실행되지 않더라도 조건 체크할 때 이미 에러날 수 있음을 생각하고 코딩할 것. 생각지도 못해서 이거 찾느라 시간 많이 쓰긴 했지만 큰 발전인 듯. 앞으로 조심할 것.