#include <iostream>
#include <algorithm>

using namespace std;

int dp[100001];

int main(int argc, const char * argv[]) {
    int n{};
    cin >> n;
   
    dp[1] = 1;
    dp[2] = 2;
    dp[3] = 3;
    
    for(int i{2}; i <= n; i++){
        dp[i] = dp[i-1] + 1;
        for(int j{1}; j*j <= i; j++){
            dp[i] = min(dp[i], dp[i-(j*j)] + 1);
        }
    }
    
    cout << dp[n] << endl;
    
    return 0;
}

// 초기조건 생각 잘할 것.
// 알고리즘은 상대적으로 빠르게 생각했으나 구현이 오래 걸렸음.
// 처음에는 큰 수부터 차례로 처리했으나 12가 반례(4+4+4 vs 9+1+1+1).
// 그 후 수정한 아이디어는
// dp[i] = min(dp[i-1] + 1, dp[i-4] + 1, dp[i-9] + 1, dp[i-16]+1......)였으나
// 코드를 반복문으로 구현할 때 오래걸렸음.
// + 초기조건과 동적프로그래밍 처리되는 과정에 대해 좀 더 익숙해지는 것이 좋겠음.