#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int N, S, result{1 << 30};

int gcd(int a, int b) {
    int c{};
    while (b) {
        c = a % b;
        a = b;
        b = c;
    }
    
    return a;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N >> S;
    vector<int> A(N);

    for (int i{}; i < N; i++)
        cin >> A[i];
    A.push_back(S);
    
    sort(A.begin(), A.end());
    
    vector<int> v;
    for (int i{}; i < N; i++) {
        int temp = A[i+1] - A[i];
        result = min(result, temp);
        v.push_back(temp);
    }
    
    for (int i{}; i < v.size(); i++) {
        if (result && v[i] % result) {
            result = gcd(v[i], result);
        }
    }
    
    cout << result << "\n";
    
    return 0;
}

// 수학 연습 백준 17087번 숨바꼭질6
// N, S, A[i] 입력받고, S +- D를 반복해서 모든 S == A[i] 되는 D의 최댓값 찾아 출력해야 함.
// -> 최대공약수

// 배열에 A[i]와 S를 저장한 후 정렬.
// A[I]와 A[i+1] 사이의 거리 벡터에 담고 그 중 최소값을 result에 담아놓음.
// result로 모든 거리 나눴을 때 나머지가 생기면 유클리드 호제법 이용해 최대공약수 찾아서 result에 넣어줌.
// 반복 끝난 뒤 result를 출력.

// 계속 틀리길래 반례 검색해보니 result가 0이 되는 경우였음. 고민하다가 유클리드 호제법에 대한 이해가 부족해서 + 까먹어서 알고리즘 잘못 구현했음. 유클리드 호제법 잘 기억해두기.