#include<iostream>
#include<cmath>
using namespace std;

int N;
int paper[2188][2188];
int ans[3];
int check;

void solve(int x, int y, int size) {
    
    check = paper[x][y];

    for (int i = x; i < x + size; i++)
        for (int j = y; j < y + size; j++)
        {
            if (paper[i][j] != paper[x][y])
            {
                solve(x, y, size / 3);
                solve(x + size * 1 / 3, y, size / 3);
                solve(x + size * 2 / 3, y, size / 3);
                solve(x, y + size * 1 / 3, size / 3);
                solve(x + size * 1 / 3, y + size * 1 / 3, size / 3);
                solve(x + size * 2 / 3, y + size * 1 / 3, size / 3);
                solve(x, y + size * 2 / 3, size / 3);
                solve(x + size * 1 / 3, y + size * 2 / 3, size / 3);
                solve(x + size * 2 / 3, y + size * 2 / 3, size / 3);
                return;
            }
        }
    ans[paper[x][y] + 1]++;
    return;
}

int main()
{
    cin >> N;

    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            cin >> paper[i][j];

    solve(0, 0, N);

    for (int i = 0; i < 3; i++) cout << ans[i] << endl;

}

// 재귀함수로 처리. 반복할 때 마다 n*n 배열에 같은 수 들어있나 확인하는 함수 만들고, 같으면 그 수의 count++. 같지 않으면 (n/3)*(n/3) 배열을 확인할 수 있게 함수를 재귀적으로 호출함*9.
// 시간은 계산해보니 가능할 것 같았음.

// -> 답은 맞았고 반례도 맞는데 틀렸습니다가 계속 나와서 결국 이유는 못찾고 알고리즘은 같은데 좀 더 보기 쉽게 구현한 다른 사람 코드 사용해 통과함.
// 솔직히 이유를 모르겠는데 뭔가 이유는 있을거라 다음부터는 코드를 좀 더 보기 편하게 구현해보도록 해야겠음. + 분명 맞는 것 같은데 안되면 + 질문에도 반례없으면 언제까지고 에러 찾지말고 1시간 쯤 찾아도 안찾아지면 그냥 다른 사람 코드보고 풀기. 구현 연습도 중요하지만 예외 처리가 안됐을 뿐 알고리즘은 구현한 것이니 예외 찾다보면 짜증도 나고 시간도 너무 낭비같아서 빨리 넘어가는게 나을 것 같음.
