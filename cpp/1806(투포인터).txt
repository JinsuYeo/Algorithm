#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

int N;
int S;
vector<int> v;
int result{1 << 30};

void dfs(int low, int high, int sum){
    while (low <= high && high < N) {
        if (sum < S) {
            sum += v[++high];
        } else if(sum == S) {
            result = min(result, high - low + 1);
            sum += v[++high];
        } else if(sum > S) {
            result = min(result, high - low + 1);
            sum -= v[low++];
//            if (low > high && low < N) {
//                high = low;
//                sum = v[low];
//            }
        }
    }
    
    return;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N >> S;
    for (int i{}; i < N; i++) {
        int t{};
        cin >> t;
        v.push_back(t);
    }

    dfs(0, 0, v[0]);
    
    if(result == 1 << 30) cout << 0 << '\n';
    else cout << result << '\n';
    
    return 0;
}

// 수열 중 연속된 수들의 부분 집합이 S보다 크거나 같은 경우 중 가장 짧은 길이 구하여 출력.
// 시간 제한 0.5초라 O(n^2)인 알고리즘은 사용 불가능.
// -> 탐색 시 이분 탐색을 사용하여 dfs 실행.
// 만약 두개로 나눴는데 두개 사이에 정답이 있다면? dfs 종료 후 인덱스로 탐색? 그래도 시간 초과 될 듯.

// 아마 이런 방식으로 푸는 문제는 아닌 듯 하여 그냥 다른 사람 코드 보고 풂.
// -> 투 포인터 알고리즘 사용.
// 혹시나 해서 2003번 풀었던 방식으로 풀어보았는데 시간 초과남. 아마 2003번도 나중에 재채점 될 수도 있을 듯.

// 방법은 이러함.
// 1. low가 high 이하이고 high가 N 미만일 때 아래와 같은 상황을 계속 확인해줍니다.

// i)구간 합이 M보다 작다면 high를 하나 더 오른쪽으로 가고 해당 숫자도 구간 합에 더해줍니다.

// ii)구간 합이 M과 같다면 경우의 수를 늘려주고 high를 하나 더 오른쪽으로 가고 해당 숫자도 구간 합에 더해줍니다.

// iii)구간 합이 M보다 크다면 low를 하나 더 오른쪽으로 가주고 low 위치에 있던 숫자를 sum에서 빼줍니다.

// a)이 때, low가 high를 역전하고 low가 N 미만일 경우 while문의 조건을 맞추기 위해 high를 low 위치와 같게 만들고 구간을 low에서부터 다시 시작합니다.
// 출처: https://jaimemin.tistory.com/1104 [꾸준함]
// https://jaimemin.tistory.com/1105

// 아마 위의 알고리즘 중 a)에 해당하는 부분(코드에 주석 처리한 부분)은 코드를 이렇게 구현했을 때는 생략해도 될 듯. 굳이 구현 안해도 결과적으로 똑같이 처리됨.

// + 답이 없는 경우 0을 출력해야 함.