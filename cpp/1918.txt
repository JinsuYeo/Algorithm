#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <algorithm>
#include <iomanip>

using namespace std;

string S, result;
stack<char> st;

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> S;
    
    for (int i{}; i < S.length(); i++) {
        if (S[i] >= 'A' && S[i] <= 'Z') {
            result += S[i];
        } else {
            switch (S[i]) {
                case '(':
                    st.push('(');
                    break;
                case '*':
                case '/':
                    while (!st.empty() && (st.top() == '*' || st.top() == '/')) {
                        result += st.top();
                        st.pop();
                    }
                    st.push(S[i]);
                    break;
                case '-':
                case '+':
                    while (!st.empty() && st.top() != '(') {
                        result += st.top();
                        st.pop();
                    }
                    st.push(S[i]);
                    break;
                case ')':
                    while (!st.empty() && st.top() != '(') {
                        result += st.top();
                        st.pop();
                    }
                    st.pop();
                    break;
                default:
                    break;
            }
        }
    }
    
    while (!st.empty()) {
        result += st.top();
        st.pop();
    }
    
    cout << result << "\n";
    
    return 0;
}

// 백준 1918번 후위 표기식

// 테스트케이스 보면서 생각해보다가 어떻게 풀어야할 지 전혀 감이 안와서(특히 스택을 어떤 것에 대해 적용해야 할 지(알파벳 or 연산자 or 둘 다)) 다른 사람 코드보고 풂. 풀이 방법 봐도 잘 모르겠어서 고민하다가 감이 와서 테스트케이스 말고도 더 생각해서 동작 방식 생각해보다가 이해하고 풂.
// 참조) https://jaimemin.tistory.com/828

// 입력받은 문자열을 반봅문으로 돌려서 알파벳(피연산자)이 나오면 바로 결과 문자열에 넣고, 연산자라면 어떤 연산자인가에 따라 별도로 처리(우선순위 별로). '('가 나오면 바로 스택에 넣어줌(우선순위 가장 높고 스택은 나중에 들어온 것 먼저 처리하므로 아직 처리되지 않은 연산자들(스택에 들어있는 연산자들)보다 ()안의 연산자들이 먼저 처리돼야 하므로).
// '*'나 '/'가 나오면 스택에 들어있는 연산자 중 '*' or '/'가 있으면 결과에 넣어주고 나온 문자를 스택에 넣어줌.
// '+' or '-'가 나오면 스택에 있는 연산자들을 결과에 넣어줌('('가 나올 때까지).
// ')'가 나오면 '('가 나올 때까지 스택의 연산자들을 결과에 넣어주고 '('는 삭제해줌.
// 이 과정을 반복. 처음에는 이해 잘 안됐는데 테스트케이스나 직접 생각한 몇개의 케이스 처리되는 과정 적으며 생각해보니 이해할 수 있었음.
// ex) A+B*C-D

// 후위 표기식에 대한 이해 부족, 특히 괄호를 어떻게 처리해야 할 지를 생각 못해서 해결 못했으나, 테스트케이스 말고도 케이스들을 더 생각해보며 동작 과정을 생각해봤다면 + 모든 과정 코드로 구현 했다면 맞출 수 있었을 듯. but 빠르게 다른 사람 코드봐서 빠른 시간 안에 후위 표기식과 풀이 방법을 이해할 수 있었던 것 같기도 함.