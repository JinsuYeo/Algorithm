#include <iostream>
#include <algorithm>
#include <string>
#include <vector>


using namespace std;
   
int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    long long n{};
    cin >> n;
    vector<int> v;
    
    if(n == 0) {
        cout << "0\n";
        return 0;
    }

    while (n != 0) {
        if(n%-2 != 0) {
            v.push_back(1);
            n = (n-1)/-2;
        } else {
            v.push_back(0);
            n /= -2;
        }
    }
    
    reverse(v.begin(), v.end());
    
    for(int &i: v) {
        cout << i;
    }
    cout << "\n";
    
    
    return 0;
}

// 2의 보수로 음수 만드는 것만 생각해서 그런지 문제 이해가 어려웠다. 지금보니 문제 예시 자체를 잘못 이해했다(예시가 -3 -> 111을 말하는 줄 알았는데 3이 111이라는 것이였다). 고정관념 때문인지 끝까지 2진법으로 음수를 표현하는 것을 구현하는 줄 알았는데 문제 이름 그대로 -2진법을 구현 하는 것이었다(-2의 제곱 형태로 수를 표현).
// 입력값의 범위가 커서 long long형으로 입력을 받았고, 10진수 -> 2진수 변환할 때랑 비슷한 방법을 사용해서 플었는데, -2로 나누면 계산이 다르게 나와서(-13 / -2는 몫이 7이고 나머지가 1이여야 하는데 값이 6으로 나온다), (n-1)/2로 처리해주었다(나머지가 1인 경우만).
// 문제를 마지막까지 이해 못해서 다른 사람이 구현한 것을 보고 힌트 삼아풀었지만 문제를 잘 이해했어도 힘든 문제였을 것 같다. 구현하는 것도 힘들었는데 처음에는 배열에 -2의 n제곱들을 저장해서 구현하다가 도저히 모르겠어서 한번 더 보고 풀었다. 비슷한 문제가 나왔을 때 풀 수 있도록 연습하고 풀어봤던 문제들도 어려웠던 것들은 다시한번 봐야겠다.