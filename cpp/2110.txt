#include <iostream>
#include <algorithm>

using namespace std;

int n, c;
long long house[200001];
long long mid, high, low, result;

int check(long long d) {
    int count{1};
    long long cur = house[1];
    for (int i{2}; i <= n; i++) {
        if (house[i] - cur >= d) {
            count++;
            cur = house[i];
        }
    }
    return count;
}

int main()
{
    cin >> n >> c;
    
    for (int i{1}; i <= n; i++)
        cin >> house[i];
    
    sort(house, house + n + 1);
    
    low = 1;
    high = house[n] - house[1];

    while (low <= high) {
        mid = (low + high) / 2;
        if(check(mid) >= c) {
            result = max(result, mid);
            low = mid + 1;
        } else high = mid - 1;
    }
    
    cout << result << "\n";
    
    return 0;
}

// logN 시간 복잡도를 가져야 해서 이분 탐색으로 풀어보려고 고민을 많이 했지만 방법을 전혀 모르겠어서 그냥 시간 제한 없이 알고리즘이라도 생각해보려 했는데 그것도 안돼서 다른 사람 코드 보고 풀었음.

// -> 집의 위치 sort해서 순서대로 정렬한 뒤, 가장 마지막 위치 - 가장 첫번째 위치로 high값 구한 뒤,  low 값은 1로 놓고 mid값 구해서 이분 탐색함. 가장 첫 위치부터 그 다음 위치로 가면서 그 사이의 거리가 mid보다 크거나 같은 위치를 찾으면 현재 위치 바꿔서 다시 다음 집까지 거리가 mid보다 크거나 같은 위치 찾는 것을 반복하며 위치의 개수를 셈. 공유기의 개수보다 크거나 같은 값이 나오면(가장 인접한 공유기의 거리를 mid로 했을 때, 가지고 있는 공유기를 모두 사용해 설치 가능) low를 mid + 1로(가장 인접한 공유기의 거리를 늘려봄), 아니면 high를 mid - 1로 해주며(가장 인접한 공유기의 거리 줄여봄) 이분 탐색함.

// 생각 못했던 부분은 가장 첫 위치는 무조건 포함 된다는 것이고, 첫 위치를 기준으로 일정 거리만큼 떨어진 집의 수 찾아가며 가능한 최대거리 찾을 생각 못함(첫번쨰 위치와 마지막 위치를 포함하고 가운데에서 n-2개를 골라야 된다는 식으로 밖에 생각 못했었음).

// 답을 보고나니 생각했을만 한데 전혀 생각을 못해서 아쉽고, 비슷한 문제 나왔을 때 이 방법 사용할 수 있도록 할 것.

// + sort()할 때 두번 째 인자 house + n + 1 로 해야하는데 house + n 으로 해서 틀림. + 13번 라인에서 i = 2부터 시작하는 것 주의.