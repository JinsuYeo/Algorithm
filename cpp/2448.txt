#include <iostream>
#include <cstdio>
#include <array>
#include <string>

using namespace std;

int n;
array<array<char, 3072*2>, 3072> arr;

void draw(int x, int y, int size) {
    if (size == 3) {
        for (int i{x-1}; i <= x + 1; i++) {
            for (int j{y-2}; j <= y + 2; j++) {
                if(i == x-1 && j == y) {
                    arr[i][j] = '*';
                }
                if (i == x && j == y - 1) {
                    arr[i][j] = '*';
                }
                if (i == x && j == y + 1) {
                    arr[i][j] = '*';
                }
                if (i == x + 1 && j >= y - 2 && j <= y + 2) {
                    arr[i][j] = '*';
                }
            }
        }
        return;
    }
    int t = size/2;
    draw(x - t, y, t);
    draw(x, y - t, t);
    draw(x, y + t, t);
}


int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> n;
    
    for (int i{}; i < n; i++) {
        arr[i].fill(' ');
    }
    
    draw(n-2, n-1, n);
    
    for (int i{}; i < n; i++) {
        for (int j{}; j < 2*n-1; j++) {
            cout << arr[i][j];
        }
        cout << "\n";
    }
    
    return 0;
}

// 2447번이랑 비슷한데 좀 더 까다로움.
// 삼각형이라 좌, 우로 동백이 있고 사이즈도 n이 아니라 위치 선정이나 초기 조건 등 고려할게 더 많은 문제임.

// 기본은 n이 3일 때 삼각형 만드는 것. 3*5의 크기. (1, 1)에서 상, 좌, 우에 별 찍고 아래 쪽 5개에 별 찍음. -> n-2, n-1(3-2, 3-1)을 재귀 함수에 전달. + 재귀함수 호출은 현재 위치에서 상, 좌, 우로 n/2씩 이동하면서(x-n/2, y or x, y - n/2를 인자로 전달하면서) 호출. + size/2 계속 하면서 재귀함수 돌림.

// 처음에 조금씩 초기 조건 설정 잘못해서 디버깅 하면서 문제 찾아서 고침. 재귀 함수 구현(or 디버깅)이 확실히 늘은 듯.