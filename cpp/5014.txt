#include <iostream>
#include <algorithm>
#include <string>
#include <queue>
#include <vector>

using namespace std;

const int MAX {1000001};

int F, S, G, U, D;

queue<pair<int, int>> q;
bool visited[MAX];

int bfs(int start){
    q.push(make_pair(start, 0));
    visited[start] = true;
    
    while (!q.empty()) {
        int cur = q.front().first;
        int count = q.front().second;
        q.pop();
        
        if (cur == G) {
            return count;
        }
        
        if (cur + U <= F && !visited[cur+U]) {
            q.push(make_pair(cur+U, count+1));
            visited[cur+U] = true;
        }
        if (cur - D >= 1 && !visited[cur-D]) {
            q.push(make_pair(cur-D, count+1));
            visited[cur-D] = true;
        }
    }
    
    return -1;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> F >> S >> G >> U >> D;
    
    int result = bfs(S);
    if (result != -1) cout << result << '\n';
    else cout << "use the stairs\n";
    
    return 0;
}

// F(1~1000000)층으로 이루어진 고층 건물.
// G층에 가야하고 현재 S층에 있음.
// 위로 U층을 가는 버튼, 아래로 D층을 가는 버튼 두개만 있을 때, G층을 가기 위해 버튼 눌러야 하는 최소 횟수 출력. 만약 갈 수 없다면 use the stairs 출력. 0 <= U, D <= 1000000.

// ex)
// 10, 1, 10, 2, 1(F, S, G, U, D)일 때,
// 1 -> 3 -> 5-> 7 -> 9 -> 8 -> 10
// 6 출력해야함.

// BFS로 횟수 세며 탐색. -> pair로 큐에 현재 위치와 횟수 저장.
// S에서 시작해서 S+U, S-D가 1~F사이에 있다면 S+U, S-D를 탐색. visited도 처리해줌.
// G층에 도착하면 bfs는 횟수 리턴. 도착 못하면 -1 리턴.
// 리턴 결과에 따라 출력.