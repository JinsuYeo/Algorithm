#include <iostream>
#include <algorithm>

using namespace std;

int arr[11];

int dp(int n) {
	if (n == 1) return 1;
	if (n == 2) return 2;
	if (n == 3) return 4;
	if (arr[n] != 0) return arr[n];
	return arr[n] = dp(n - 1) + dp(n - 2) + dp(n - 3);
}

int main() {
	int a{};
	cin >> a;

	for (int i = 0; i < a; i++) {
		for (int j = 0; j < 11; j++) {
			arr[j] = 0;
		}
		int n{};

		cin >> n;
		cout << dp(n) << "\n";
	}

	return 0;
}

// 동적 프로그래밍 연습

// # 나중에 다시 푼 방법
#include <iostream>
#include <algorithm>
#include <array>
#include <vector>

using namespace std;

array<int, 11> arr;
vector<int> v;

int T, N;

int main(void){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> T;
    for (int i{}; i < T; i++) {
        cin >> N;
        v.push_back(N);
    }
    
    arr[1] = 1;
    arr[2] = 2;
    arr[3] = 4;
    
    for(int i{4}; i < 11; i++) {
        arr[i] = arr[i-3] + arr[i-2] + arr[i-1];
    }
    
    for (auto e: v) {
        cout << arr[e] << '\n';
    }
    
    return 0;
}

// 완전 탐색 연습할 때 풂.
// DP로 풀어봤던 문제라 DP로 다시 구현해봤음. 처음엔 까먹어서 어떻게 풀었지 하다가 각 케이스 별로 쓰면서 규칙 찾아서 구현함.
// -> 1은 1개, 2는 2개, 3은 4개부터 시작해서 4는 1+2+4 = 7, 5는 2+4+7=13... 의 규칙을 따름. DP로 구현.

// 재귀 함수 이용해서 완전 탐색으로도 풀 수 있음. arr[]에 저장 안하고 풀면 완전 탐색.

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int N;
vector<int> dp(11);

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> N;
    
    dp[0] = 1;
    dp[1] = 1;
    dp[2] = 2;
    
    for(int i = 3; i < 11; i++) {
        dp[i] = dp[i-3] + dp[i-2] + dp[i-1];
    }
    
    for (int i = 0; i < N; i++) {
        int t;
        cin >> t;
        cout << dp[t] << '\n';
    }
    
    return 0;
}

// 규칙 찾은 후, dp로 구현.