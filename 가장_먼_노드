#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <math.h>
#include <queue>

using namespace std;

struct Node {
    int nodeNum;
    int count;
};

vector<vector<int>> list;
vector<int> v;
queue<Node> q;
bool visited[20001];

int maxValue;
int res;

void bfs() {
    
    q.push({1, 0});
    visited[1] = true;
    
    while(!q.empty()) {
        
        int curNodeNum = q.front().nodeNum;
        int count = q.front().count;
        q.pop();
        
        if(count >= maxValue) {
            maxValue = count;
            v.push_back(count);
        }
        
        for(int i = 0; i < list[curNodeNum].size(); i++) {
            int nextNodeNum = list[curNodeNum][i];
            if(!visited[nextNodeNum]) {
                q.push({nextNodeNum, count+1});
                visited[nextNodeNum] = true;
            }
        }
    }
}

int solution(int n, vector<vector<int>> edge) {
    
    list = vector<vector<int>>(n+1);
    
    for(int i = 0; i < edge.size(); i++) {
        int node1 = edge[i][0];
        int node2 = edge[i][1];
        list[node1].push_back(node2);
        list[node2].push_back(node1);
    }
    
    bfs();
    
    for(int i = 0; i < v.size(); i++) {
        if(maxValue == v[i]) res++;
    }
    
    return res;
}