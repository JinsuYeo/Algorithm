#include<iostream>
#include<algorithm>
#include<string>
#include<vector>
#include<math.h>

using namespace std;

string dtob(int n) {
    string binary = "";
    
    while (n) {
        binary = to_string(n%2) + binary;
        n /= 2;
    }
    
    return binary;
}

int btod(string b) {
    int n = 0;
    reverse(b.begin(), b.end());
    for (int i = 0; i < b.length(); i++) {
        if(b[i] == '1') n += pow(2, i);
    }
    
    return n;
}

int solution(int n) {
    int answer = 0;
    
    string binary = "0" + dtob(n);
    
    next_permutation(binary.begin(), binary.end());
    
    answer = btod(binary);
    
    return answer;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    int t = 0;
    cin >> t;
    
    cout << solution(t);
   
    return 0;
}


// 자연수 n의 다음 큰 숫자는 n보다 크고, 2진수로 변환 시 1의 갯수가 같고, 두 조건을 만족하는 수 중 가장 작은 수(n <= 1000000)
// Ex) 78(1001110)의 다음 큰 숫자는 83(1010011)
// 10^6은 2^20과 비슷하므로 n을 string으로 이진수로 변환해야 함. 
// 뒤에서부터 1이 나온 뒤 나오는 가장 첫 0을 1로 바꾸고, 바뀐 1 뒤에는 원래 1의 개수만큼 뒤에서부터 채우고 나머지는 0으로 채워 int로 변환하여 반환
// -> 효율성 테스트 통과 못함. 
// -> 위의 알고리즘은 다음 순열을 찾는 것과 동일. 따라서 next_permutation() 함수 이용 -> 통과
// bitset과 count() 메서드도 이용 가능 or 비트 연산자로 1세고 n++하고 1 갯수 비교도 가능